/** \file
 *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g
 *     -                            On : 2011-05-08 16:46:26
 *     -                for the parser : GroupParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// $ANTLR ${project.version} ${buildNumber} /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g 2011-05-08 16:46:26


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "GroupParser.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_oldStyleHeader_in_group179;
static const unsigned long long FOLLOW_oldStyleHeader_in_group179_data[] = { 0x0000000010400010LL};
static ANTLRBitSet *FOLLOW_28_in_group190;
static const unsigned long long FOLLOW_28_in_group190_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_group192;
static const unsigned long long FOLLOW_STRING_in_group192_data[] = { 0x0000000010400010LL};
static ANTLRBitSet *FOLLOW_28_in_group204;
static const unsigned long long FOLLOW_28_in_group204_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group233;
static const unsigned long long FOLLOW_ID_in_group233_data[] = { 0x0000000010420010LL};
static ANTLRBitSet *FOLLOW_17_in_group236;
static const unsigned long long FOLLOW_17_in_group236_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group238;
static const unsigned long long FOLLOW_ID_in_group238_data[] = { 0x0000000010420010LL};
static ANTLRBitSet *FOLLOW_def_in_group262;
static const unsigned long long FOLLOW_def_in_group262_data[] = { 0x0000000000400012LL};
static ANTLRBitSet *FOLLOW_26_in_oldStyleHeader284;
static const unsigned long long FOLLOW_26_in_oldStyleHeader284_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader286;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader286_data[] = { 0x0000000008140000LL};
static ANTLRBitSet *FOLLOW_18_in_oldStyleHeader290;
static const unsigned long long FOLLOW_18_in_oldStyleHeader290_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader292;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader292_data[] = { 0x0000000008100000LL};
static ANTLRBitSet *FOLLOW_27_in_oldStyleHeader307;
static const unsigned long long FOLLOW_27_in_oldStyleHeader307_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader309;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader309_data[] = { 0x0000000000110000LL};
static ANTLRBitSet *FOLLOW_16_in_oldStyleHeader312;
static const unsigned long long FOLLOW_16_in_oldStyleHeader312_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader314;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader314_data[] = { 0x0000000000110000LL};
static ANTLRBitSet *FOLLOW_20_in_oldStyleHeader329;
static const unsigned long long FOLLOW_20_in_oldStyleHeader329_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName359;
static const unsigned long long FOLLOW_ID_in_groupName359_data[] = { 0x0000000000020002LL};
static ANTLRBitSet *FOLLOW_17_in_groupName364;
static const unsigned long long FOLLOW_17_in_groupName364_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName368;
static const unsigned long long FOLLOW_ID_in_groupName368_data[] = { 0x0000000000020002LL};
static ANTLRBitSet *FOLLOW_templateDef_in_def388;
static const unsigned long long FOLLOW_templateDef_in_def388_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_dictDef_in_def393;
static const unsigned long long FOLLOW_dictDef_in_def393_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_22_in_templateDef427;
static const unsigned long long FOLLOW_22_in_templateDef427_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef431;
static const unsigned long long FOLLOW_ID_in_templateDef431_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_17_in_templateDef433;
static const unsigned long long FOLLOW_17_in_templateDef433_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef437;
static const unsigned long long FOLLOW_ID_in_templateDef437_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_14_in_templateDef439;
static const unsigned long long FOLLOW_14_in_templateDef439_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_15_in_templateDef441;
static const unsigned long long FOLLOW_15_in_templateDef441_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef457;
static const unsigned long long FOLLOW_ID_in_templateDef457_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_14_in_templateDef459;
static const unsigned long long FOLLOW_14_in_templateDef459_data[] = { 0x0000000000008010LL};
static ANTLRBitSet *FOLLOW_formalArgs_in_templateDef461;
static const unsigned long long FOLLOW_formalArgs_in_templateDef461_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_15_in_templateDef463;
static const unsigned long long FOLLOW_15_in_templateDef463_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_19_in_templateDef483;
static const unsigned long long FOLLOW_19_in_templateDef483_data[] = { 0x0000000000000C42LL};
static ANTLRBitSet *FOLLOW_STRING_in_templateDef507;
static const unsigned long long FOLLOW_STRING_in_templateDef507_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_templateDef527;
static const unsigned long long FOLLOW_BIGSTRING_in_templateDef527_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_templateDef544;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_templateDef544_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef593;
static const unsigned long long FOLLOW_ID_in_templateDef593_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_19_in_templateDef595;
static const unsigned long long FOLLOW_19_in_templateDef595_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef599;
static const unsigned long long FOLLOW_ID_in_templateDef599_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs633;
static const unsigned long long FOLLOW_formalArg_in_formalArgs633_data[] = { 0x0000000000010002LL};
static ANTLRBitSet *FOLLOW_16_in_formalArgs637;
static const unsigned long long FOLLOW_16_in_formalArgs637_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs639;
static const unsigned long long FOLLOW_formalArg_in_formalArgs639_data[] = { 0x0000000000010002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArg668;
static const unsigned long long FOLLOW_ID_in_formalArg668_data[] = { 0x0000000000200002LL};
static ANTLRBitSet *FOLLOW_21_in_formalArg682;
static const unsigned long long FOLLOW_21_in_formalArg682_data[] = { 0x00000000000030C0LL};
static ANTLRBitSet *FOLLOW_set_in_formalArg686;
static const unsigned long long FOLLOW_set_in_formalArg686_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_dictDef752;
static const unsigned long long FOLLOW_ID_in_dictDef752_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_19_in_dictDef754;
static const unsigned long long FOLLOW_19_in_dictDef754_data[] = { 0x0000000000800000LL};
static ANTLRBitSet *FOLLOW_dict_in_dictDef756;
static const unsigned long long FOLLOW_dict_in_dictDef756_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_23_in_dict794;
static const unsigned long long FOLLOW_23_in_dict794_data[] = { 0x0000000002000040LL};
static ANTLRBitSet *FOLLOW_dictPairs_in_dict796;
static const unsigned long long FOLLOW_dictPairs_in_dict796_data[] = { 0x0000000001000000LL};
static ANTLRBitSet *FOLLOW_24_in_dict799;
static const unsigned long long FOLLOW_24_in_dict799_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs819;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs819_data[] = { 0x0000000000010002LL};
static ANTLRBitSet *FOLLOW_16_in_dictPairs831;
static const unsigned long long FOLLOW_16_in_dictPairs831_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs833;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs833_data[] = { 0x0000000000010002LL};
static ANTLRBitSet *FOLLOW_16_in_dictPairs839;
static const unsigned long long FOLLOW_16_in_dictPairs839_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs841;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs841_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs854;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs854_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_25_in_defaultValuePair884;
static const unsigned long long FOLLOW_25_in_defaultValuePair884_data[] = { 0x0000000000040000LL};
static ANTLRBitSet *FOLLOW_18_in_defaultValuePair886;
static const unsigned long long FOLLOW_18_in_defaultValuePair886_data[] = { 0x0000000000003CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_defaultValuePair888;
static const unsigned long long FOLLOW_keyValue_in_defaultValuePair888_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValuePair910;
static const unsigned long long FOLLOW_STRING_in_keyValuePair910_data[] = { 0x0000000000040000LL};
static ANTLRBitSet *FOLLOW_18_in_keyValuePair912;
static const unsigned long long FOLLOW_18_in_keyValuePair912_data[] = { 0x0000000000003CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_keyValuePair914;
static const unsigned long long FOLLOW_keyValue_in_keyValuePair914_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_keyValue939;
static const unsigned long long FOLLOW_BIGSTRING_in_keyValue939_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_keyValue961;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_keyValue961_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue977;
static const unsigned long long FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue977_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValue990;
static const unsigned long long FOLLOW_STRING_in_keyValue990_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_keyValue1015;
static const unsigned long long FOLLOW_T_TRUE_in_keyValue1015_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_keyValue1040;
static const unsigned long long FOLLOW_T_FALSE_in_keyValue1040_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_keyValue1067;
static const unsigned long long FOLLOW_ID_in_keyValue1067_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global Scopes

#pragma mark Dynamic Rule Scopes Implementation start
@implementation formalArgs_Scope  /* start of ruleAttributeScopeImplementation */
@synthesize hasOptionalParameter;

+ (formalArgs_Scope *)newformalArgs_Scope
{
    return [[formalArgs_Scope alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of formalArgs_Scope get and set functions */

- (BOOL)gethasOptionalParameter { return( hasOptionalParameter ); }

- (void)sethasOptionalParameter:(BOOL)aVal { hasOptionalParameter = aVal; }

/* End of formalArgs_Scope get and set functions */

@end /* end of ruleAttributeScopeImplementation */


#pragma mark Dynamic Rule Scopes Implementation end

#pragma mark Rule Return Scopes Implementation start
#pragma mark Rule Return Scopes Implementation end

@implementation GroupParser  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes
/* ruleAttributeScope */
static SymbolStack *formalArgs_stack;


/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

@synthesize group;

/* ObjC end actions.(actionScope).synthesize */
/* ObjC start synthesize() */
/* ObjC end synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_oldStyleHeader_in_group179 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_oldStyleHeader_in_group179_data Count:(NSUInteger)1] retain];
    FOLLOW_28_in_group190 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_group190_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_group192 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_group192_data Count:(NSUInteger)1] retain];
    FOLLOW_28_in_group204 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_group204_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group233 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group233_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_group236 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_group236_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_group238 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group238_data Count:(NSUInteger)1] retain];
    FOLLOW_def_in_group262 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_def_in_group262_data Count:(NSUInteger)1] retain];
    FOLLOW_26_in_oldStyleHeader284 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_oldStyleHeader284_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader286 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader286_data Count:(NSUInteger)1] retain];
    FOLLOW_18_in_oldStyleHeader290 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_oldStyleHeader290_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader292 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader292_data Count:(NSUInteger)1] retain];
    FOLLOW_27_in_oldStyleHeader307 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_27_in_oldStyleHeader307_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader309 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader309_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_oldStyleHeader312 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_oldStyleHeader312_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_oldStyleHeader314 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader314_data Count:(NSUInteger)1] retain];
    FOLLOW_20_in_oldStyleHeader329 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_oldStyleHeader329_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName359 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName359_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_groupName364 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_groupName364_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_groupName368 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName368_data Count:(NSUInteger)1] retain];
    FOLLOW_templateDef_in_def388 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_templateDef_in_def388_data Count:(NSUInteger)1] retain];
    FOLLOW_dictDef_in_def393 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dictDef_in_def393_data Count:(NSUInteger)1] retain];
    FOLLOW_22_in_templateDef427 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_templateDef427_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef431 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef431_data Count:(NSUInteger)1] retain];
    FOLLOW_17_in_templateDef433 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_17_in_templateDef433_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef437 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef437_data Count:(NSUInteger)1] retain];
    FOLLOW_14_in_templateDef439 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_templateDef439_data Count:(NSUInteger)1] retain];
    FOLLOW_15_in_templateDef441 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_templateDef441_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef457 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef457_data Count:(NSUInteger)1] retain];
    FOLLOW_14_in_templateDef459 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_14_in_templateDef459_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArgs_in_templateDef461 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgs_in_templateDef461_data Count:(NSUInteger)1] retain];
    FOLLOW_15_in_templateDef463 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_15_in_templateDef463_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_templateDef483 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_templateDef483_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_templateDef507 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_templateDef507_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_templateDef527 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_templateDef527_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_NO_NL_in_templateDef544 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_templateDef544_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef593 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef593_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_templateDef595 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_templateDef595_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_templateDef599 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef599_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs633 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs633_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_formalArgs637 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_formalArgs637_data Count:(NSUInteger)1] retain];
    FOLLOW_formalArg_in_formalArgs639 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs639_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_formalArg668 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArg668_data Count:(NSUInteger)1] retain];
    FOLLOW_21_in_formalArg682 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_formalArg682_data Count:(NSUInteger)1] retain];
    FOLLOW_set_in_formalArg686 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_formalArg686_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_dictDef752 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_dictDef752_data Count:(NSUInteger)1] retain];
    FOLLOW_19_in_dictDef754 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_dictDef754_data Count:(NSUInteger)1] retain];
    FOLLOW_dict_in_dictDef756 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dict_in_dictDef756_data Count:(NSUInteger)1] retain];
    FOLLOW_23_in_dict794 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_dict794_data Count:(NSUInteger)1] retain];
    FOLLOW_dictPairs_in_dict796 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dictPairs_in_dict796_data Count:(NSUInteger)1] retain];
    FOLLOW_24_in_dict799 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_dict799_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs819 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs819_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_dictPairs831 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_dictPairs831_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValuePair_in_dictPairs833 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs833_data Count:(NSUInteger)1] retain];
    FOLLOW_16_in_dictPairs839 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_16_in_dictPairs839_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs841 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs841_data Count:(NSUInteger)1] retain];
    FOLLOW_defaultValuePair_in_dictPairs854 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs854_data Count:(NSUInteger)1] retain];
    FOLLOW_25_in_defaultValuePair884 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_defaultValuePair884_data Count:(NSUInteger)1] retain];
    FOLLOW_18_in_defaultValuePair886 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_defaultValuePair886_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_defaultValuePair888 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_defaultValuePair888_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValuePair910 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValuePair910_data Count:(NSUInteger)1] retain];
    FOLLOW_18_in_keyValuePair912 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_keyValuePair912_data Count:(NSUInteger)1] retain];
    FOLLOW_keyValue_in_keyValuePair914 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_keyValuePair914_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_in_keyValue939 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_keyValue939_data Count:(NSUInteger)1] retain];
    FOLLOW_BIGSTRING_NO_NL_in_keyValue961 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_keyValue961_data Count:(NSUInteger)1] retain];
    FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue977 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue977_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_keyValue990 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValue990_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_keyValue1015 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_keyValue1015_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_keyValue1040 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_keyValue1040_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_keyValue1067 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_keyValue1067_data Count:(NSUInteger)1] retain];

    [BaseRecognizer setTokenNames:[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"BIGSTRING_NO_NL", @"T_FALSE", @"T_TRUE", @"'('", @"')'", 
 @"','", @"'.'", @"':'", @"'::='", @"';'", @"'='", @"'@'", @"'['", @"']'", 
 @"'default'", @"'group'", @"'implements'", @"'import'", nil]];
    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g"];
}

+ (GroupParser *)newGroupParser:(id<TokenStream>)aStream
{
    return [[GroupParser alloc] initWithTokenStream:aStream];


}

- (id) initWithTokenStream:(id<TokenStream>)aStream
{
    self = [super initWithTokenStream:aStream State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:13+1]];
    if ( self != nil ) {


        /* ruleAttributeScopeInit */
        formalArgs_scope = [formalArgs_Scope newformalArgs_Scope];
        formalArgs_stack = [SymbolStack newSymbolStackWithLen:30];
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    [super dealloc];
}

/* ObjC start members */
/* ObjC end members */
/* ObjC start actions.(actionScope).methods */

+ (NSInteger) TANONYMOUS_TEMPLATE { return ANONYMOUS_TEMPLATE; }
+ (NSInteger) TBIGSTRING { return BIGSTRING; }
+ (NSInteger) TBIGSTRING_NO_NL { return BIGSTRING_NO_NL; }
+ (NSInteger) TID { return ID; }
+ (NSInteger) TTRUE { return T_TRUE; }
- (void) displayRecognitionError:(AMutableArray *) tokenNames e:(RecognitionException *)e
{
    NSString *msg = [self getErrorMessage:e TokenNames:[self getTokenNames]];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
}

- (NSString *) getSourceName
{
#ifdef DONTUSENOMO
    NSError **outError;
    NSString *fullFileName = [super getSourceName];
    NSFileWrapper *f = [[NSFileWrapper alloc] initWithURL:fullFileName options:NSFileWrapperReadingImmediate error:outError]; // strip to simple name
    return [f filename];
#endif
    return [super getSourceName];
}

- (void) error:(NSString *)msg
{
    NoViableAltException *e = [NoViableAltException newException:0 state:0 stream:input];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
    [self recover:input Exception:nil];
}

- (NSString *) getErrorMessage:(NSException *)e TokenNames:(AMutableArray *)TokenNames
{
    return [NSString stringWithFormat:@"%@--%@", e.name, e.reason];
}


/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */
/*
 * $ANTLR start group
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:209:1: group[STGroup *aGroup, NSString *prefix] : ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ;
 */
- (void) group:(STGroup *)aGroup arg1:(NSString *)prefix 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */


    GroupLexer *lexer = (GroupLexer *)[input getTokenSource];
    self.group = lexer.group = aGroup;

    @try {
        STToken *STRING1 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:214:5: ( ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:214:9: ( oldStyleHeader )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )+ // alt
        {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:214:9: ( oldStyleHeader )? // block
        NSInteger alt1=2;
        NSInteger LA1_0 = [input LA:1];

        if ( (LA1_0==26) ) {
            alt1=1;
        }
        switch (alt1) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:214:9: oldStyleHeader // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_oldStyleHeader_in_group179];
                [self oldStyleHeader];

                [self popFollow];



                }
                break;

        }


        do {
            NSInteger alt3=3;
            NSInteger LA3_0 = [input LA:1];
            if ( (LA3_0==28) ) {
                NSInteger LA3_2 = [input LA:2];
                if ( (LA3_2==STRING) ) {
                    alt3=1;
                }
                else if ( (LA3_2==ID) ) {
                    alt3=2;
                }


            }


            switch (alt3) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:215:9: 'import' STRING // alt
                    {
                    [self match:input TokenType:28 Follow:FOLLOW_28_in_group190]; 

                    STRING1=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_group192]; 

                    [aGroup importTemplatesWithFileName:STRING1];


                    }
                    break;
                case 2 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:216:9: 'import' ID ( '.' ID )* // alt
                    {
                    [self match:input TokenType:28 Follow:FOLLOW_28_in_group204]; 


                                MismatchedTokenException *e = [MismatchedTokenException newException:STRING Stream:input];
                                [self reportError:e];
                                


                    [self match:input TokenType:ID Follow:FOLLOW_ID_in_group233]; 

                    do {
                        NSInteger alt2=2;
                        NSInteger LA2_0 = [input LA:1];
                        if ( (LA2_0==17) ) {
                            alt2=1;
                        }


                        switch (alt2) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:221:17: '.' ID // alt
                                {
                                [self match:input TokenType:17 Follow:FOLLOW_17_in_group236]; 

                                [self match:input TokenType:ID Follow:FOLLOW_ID_in_group238]; 

                                }
                                break;

                            default :
                                goto loop2;
                        }
                    } while (YES);
                    loop2: ;


                    }
                    break;

                default :
                    goto loop3;
            }
        } while (YES);
        loop3: ;


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:223:9: ( def[prefix] )+ // positiveClosureBlock
        NSInteger cnt4 = 0;
        do {
            NSInteger alt4 = 2;
            NSInteger LA4_0 = [input LA:1];
            if ( (LA4_0==ID||LA4_0==22) ) {
                alt4=1;
            }


            switch (alt4) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:223:9: def[prefix] // alt
                    {
                    /* ruleRef */
                    [self pushFollow:FOLLOW_def_in_group262];
                    [self def:prefix ];

                    [self popFollow];



                    }
                    break;

                default :
                    if ( cnt4 >= 1 )
                        goto loop4;
                    EarlyExitException *eee =
                        [EarlyExitException newException:input decisionNumber:4];
                    @throw eee;
            }
            cnt4++;
        } while (YES);
        loop4: ;


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end group */

/*
 * $ANTLR start oldStyleHeader
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:226:1: oldStyleHeader : 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ;
 */
- (void) oldStyleHeader
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:227:5: ( 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:227:9: 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' // alt
        {
        [self match:input TokenType:26 Follow:FOLLOW_26_in_oldStyleHeader284]; 

        [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader286]; 

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:227:20: ( ':' ID )? // block
        NSInteger alt5=2;
        NSInteger LA5_0 = [input LA:1];

        if ( (LA5_0==18) ) {
            alt5=1;
        }
        switch (alt5) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:227:22: ':' ID // alt
                {
                [self match:input TokenType:18 Follow:FOLLOW_18_in_oldStyleHeader290]; 

                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader292]; 

                }
                break;

        }


        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:228:9: ( 'implements' ID ( ',' ID )* )? // block
        NSInteger alt7=2;
        NSInteger LA7_0 = [input LA:1];

        if ( (LA7_0==27) ) {
            alt7=1;
        }
        switch (alt7) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:228:11: 'implements' ID ( ',' ID )* // alt
                {
                [self match:input TokenType:27 Follow:FOLLOW_27_in_oldStyleHeader307]; 

                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader309]; 

                do {
                    NSInteger alt6=2;
                    NSInteger LA6_0 = [input LA:1];
                    if ( (LA6_0==16) ) {
                        alt6=1;
                    }


                    switch (alt6) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:228:28: ',' ID // alt
                            {
                            [self match:input TokenType:16 Follow:FOLLOW_16_in_oldStyleHeader312]; 

                            [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader314]; 

                            }
                            break;

                        default :
                            goto loop6;
                    }
                } while (YES);
                loop6: ;


                }
                break;

        }


        [self match:input TokenType:20 Follow:FOLLOW_20_in_oldStyleHeader329]; 

        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end oldStyleHeader */

/*
 * $ANTLR start groupName
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:232:1: groupName returns [NSString *name] : a= ID ( '.' a= ID )* ;
 */
- (NSString *) groupName
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    NSString * name = nil ;


    NSMutableString *buf = [NSMutableString stringWithCapacity:16];
    @try {
        STToken *a = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:234:5: (a= ID ( '.' a= ID )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:234:9: a= ID ( '.' a= ID )* // alt
        {
        a=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName359]; 
        [buf appendString:(a!=nil?a.text:@"")];

        do {
            NSInteger alt8=2;
            NSInteger LA8_0 = [input LA:1];
            if ( (LA8_0==17) ) {
                alt8=1;
            }


            switch (alt8) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:234:45: '.' a= ID // alt
                    {
                    [self match:input TokenType:17 Follow:FOLLOW_17_in_groupName364]; 

                    a=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName368]; 
                    [buf appendString:(a!=nil?a.text:@"")];
                    }
                    break;

                default :
                    goto loop8;
            }
        } while (YES);
        loop8: ;


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return name;
}
/* $ANTLR end groupName */

/*
 * $ANTLR start def
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:241:1: def[NSString *prefix] : ( templateDef[prefix] | dictDef );
 */
- (void) def:(NSString *)prefix 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:241:23: ( templateDef[prefix] | dictDef ) //ruleblock
        NSInteger alt9=2;
        NSInteger LA9_0 = [input LA:1];

        if ( (LA9_0==22) ) {
            alt9=1;
        }
        else if ( (LA9_0==ID) ) {
            NSInteger LA9_2 = [input LA:2];

            if ( (LA9_2==14) ) {
                alt9=1;
            }
            else if ( (LA9_2==19) ) {
                NSInteger LA9_3 = [input LA:3];

                if ( (LA9_3==ID) ) {
                    alt9=1;
                }
                else if ( (LA9_3==23) ) {
                    alt9=2;
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:9 state:3 stream:input];
                    nvae.c = LA9_3;
                    @throw nvae;

                }
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:9 state:2 stream:input];
                nvae.c = LA9_2;
                @throw nvae;

            }
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:9 state:0 stream:input];
            nvae.c = LA9_0;
            @throw nvae;

        }
        switch (alt9) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:241:25: templateDef[prefix] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_templateDef_in_def388];
                [self templateDef:prefix ];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:241:47: dictDef // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_dictDef_in_def393];
                [self dictDef];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (RecognitionException *re) {

                // pretend we already saw an error here
                state.lastErrorIndex = input.index;
                [self error:[NSString stringWithFormat:@"garbled template definition starting at '%@'", [[input LT:1] text]]];
            
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end def */

/*
 * $ANTLR start templateDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:248:1: templateDef[NSString *prefix] : ( ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID );
 */
- (void) templateDef:(NSString *)prefix 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */


        NSString *template=nil;
        NSInteger n=0; // num char to strip from left, right of template def

    @try {
        STToken *enclosing = nil;
        STToken *name = nil;
        STToken *alias = nil;
        STToken *target = nil;
        STToken *STRING2 = nil;
        STToken *BIGSTRING3 = nil;
        STToken *BIGSTRING_NO_NL4 = nil;
         AMutableArray * formalArgs5 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:5: ( ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID ) //ruleblock
        NSInteger alt12=2;
        NSInteger LA12_0 = [input LA:1];

        if ( (LA12_0==22) ) {
            alt12=1;
        }
        else if ( (LA12_0==ID) ) {
            NSInteger LA12_2 = [input LA:2];

            if ( (LA12_2==14) ) {
                alt12=1;
            }
            else if ( (LA12_2==19) ) {
                alt12=2;
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:12 state:2 stream:input];
                nvae.c = LA12_2;
                @throw nvae;

            }
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:12 state:0 stream:input];
            nvae.c = LA12_0;
            @throw nvae;

        }
        switch (alt12) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:9: ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) // alt
                {
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:9: ( '@' enclosing= ID '.' name= ID '(' ')' |name= ID '(' formalArgs ')' ) // block
                NSInteger alt10=2;
                NSInteger LA10_0 = [input LA:1];

                if ( (LA10_0==22) ) {
                    alt10=1;
                }
                else if ( (LA10_0==ID) ) {
                    alt10=2;
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:10 state:0 stream:input];
                    nvae.c = LA10_0;
                    @throw nvae;

                }
                switch (alt10) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:253:13: '@' enclosing= ID '.' name= ID '(' ')' // alt
                        {
                        [self match:input TokenType:22 Follow:FOLLOW_22_in_templateDef427]; 

                        enclosing=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef431]; 

                        [self match:input TokenType:17 Follow:FOLLOW_17_in_templateDef433]; 

                        name=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef437]; 

                        [self match:input TokenType:14 Follow:FOLLOW_14_in_templateDef439]; 

                        [self match:input TokenType:15 Follow:FOLLOW_15_in_templateDef441]; 

                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:254:13: name= ID '(' formalArgs ')' // alt
                        {
                        name=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef457]; 

                        [self match:input TokenType:14 Follow:FOLLOW_14_in_templateDef459]; 

                        /* ruleRef */
                        [self pushFollow:FOLLOW_formalArgs_in_templateDef461];
                        formalArgs5 = [self formalArgs];

                        [self popFollow];



                        [self match:input TokenType:15 Follow:FOLLOW_15_in_templateDef463]; 

                        }
                        break;

                }


                [self match:input TokenType:19 Follow:FOLLOW_19_in_templateDef483]; 

                STToken *templateToken = [input LT:1];


                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:258:9: ( STRING | BIGSTRING | BIGSTRING_NO_NL |) // block
                NSInteger alt11=4;
                unichar charLA11 = [input LA:1];
                switch (charLA11) {
                    case STRING: ;
                        {
                        alt11=1;
                        }
                        break;
                    case BIGSTRING: ;
                        {
                        alt11=2;
                        }
                        break;
                    case BIGSTRING_NO_NL: ;
                        {
                        alt11=3;
                        }
                        break;
                    case EOF: ;
                    case ID: ;
                    case 22: ;
                        {
                        alt11=4;
                        }
                        break;

                default: ;
                    NoViableAltException *nvae = [NoViableAltException newException:11 state:0 stream:input];
                    nvae.c = charLA11;
                    @throw nvae;

                }

                switch (alt11) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:258:13: STRING // alt
                        {
                        STRING2=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_templateDef507]; 

                        template=(STRING2!=nil?STRING2.text:nil); n=1;


                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:259:13: BIGSTRING // alt
                        {
                        BIGSTRING3=(STToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_templateDef527]; 

                        template=(BIGSTRING3!=nil?BIGSTRING3.text:nil); n=2;


                        }
                        break;
                    case 3 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:260:13: BIGSTRING_NO_NL // alt
                        {
                        BIGSTRING_NO_NL4=(STToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_templateDef544]; 

                        template=(BIGSTRING_NO_NL4!=nil?BIGSTRING_NO_NL4.text:nil); n=2;


                        }
                        break;
                    case 4 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:261:13:  // alt
                        {
                            template = @"";
                            NSString *msg = [NSString stringWithFormat:@"missing template at '%@'", [[input LT:1] text]];
                            NoViableAltException *e = [NoViableAltException newException:0 state:0 stream:input];
                            [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
                        }
                        break;

                }



                        if ( (name!=nil?[name getTokenIndex]:0) >= 0 ) { // if ID missing
                            template = [Misc strip:template n:n];
                            NSString *templateName = (name!=nil?name.text:nil);
                            if ( [prefix length] > 0 ) templateName = [NSString stringWithFormat: @"%@/%@", prefix, (name!=nil?name.text:nil)];
                            [group defineTemplateOrRegion:templateName
                            regionSurroundingTemplateName:(enclosing!=nil?enclosing.text:nil)
                                            templateToken:templateToken
                                                 template:template
                                                nameToken:name
                                                     args:
                formalArgs5
                ];
                        }
                        


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:281:9: alias= ID '::=' target= ID // alt
                {
                alias=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef593]; 

                [self match:input TokenType:19 Follow:FOLLOW_19_in_templateDef595]; 

                target=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef599]; 

                [group defineTemplateAlias:alias targetT:target];


                }
                break;

        }
        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end templateDef */

/*
 * $ANTLR start formalArgs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:284:1: formalArgs returns [AMutableArray *args = [AMutableArray arrayWithCapacity:5]] : ( formalArg[$args] ( ',' formalArg[$args] )* |);
 */
- (AMutableArray *) formalArgs
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */
    [formalArgs_stack push:[[formalArgs_Scope newformalArgs_Scope] retain]];
    AMutableArray * args =  [AMutableArray arrayWithCapacity:5];


     /* scopeSetAttributeRef */((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter =  false;
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:289:5: ( formalArg[$args] ( ',' formalArg[$args] )* |) //ruleblock
        NSInteger alt14=2;
        NSInteger LA14_0 = [input LA:1];

        if ( (LA14_0==ID) ) {
            alt14=1;
        }
        else if ( (LA14_0==15) ) {
            alt14=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:14 state:0 stream:input];
            nvae.c = LA14_0;
            @throw nvae;

        }
        switch (alt14) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:289:9: formalArg[$args] ( ',' formalArg[$args] )* // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_formalArg_in_formalArgs633];
                [self formalArg:
                args
                 ];

                [self popFollow];



                do {
                    NSInteger alt13=2;
                    NSInteger LA13_0 = [input LA:1];
                    if ( (LA13_0==16) ) {
                        alt13=1;
                    }


                    switch (alt13) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:289:27: ',' formalArg[$args] // alt
                            {
                            [self match:input TokenType:16 Follow:FOLLOW_16_in_formalArgs637]; 

                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArg_in_formalArgs639];
                            [self formalArg:
                            args
                             ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop13;
                    }
                } while (YES);
                loop13: ;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:291:5:  // alt
                {
                }
                break;

        }
        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */
        [formalArgs_stack pop];
    }
    return args;
}
/* $ANTLR end formalArgs */

/*
 * $ANTLR start formalArg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:293:1: formalArg[AMutableArray *args] : ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) |) ;
 */
- (void) formalArg:(AMutableArray *)args 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        STToken *a = nil;
        STToken *ID6 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:294:5: ( ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) |) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:294:9: ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) |) // alt
        {
        ID6=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArg668]; 

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:295:9: ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) |) // block
        NSInteger alt15=2;
        NSInteger LA15_0 = [input LA:1];

        if ( (LA15_0==21) ) {
            alt15=1;
        }
        else if ( ((LA15_0 >= 15 && LA15_0 <= 16)) ) {
            alt15=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:15 state:0 stream:input];
            nvae.c = LA15_0;
            @throw nvae;

        }
        switch (alt15) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:295:13: '=' a= ( STRING | ANONYMOUS_TEMPLATE | 'true' | 'false' ) // alt
                {
                [self match:input TokenType:21 Follow:FOLLOW_21_in_formalArg682]; 

                a = (STToken *)[input LT:1]; /* matchSet */

                if ((([input LA:1] >= STRING) && ([input LA:1] <= ANONYMOUS_TEMPLATE))||(([input LA:1] >= T_FALSE) && ([input LA:1] <= T_TRUE))) {
                    [input consume];
                    [state setIsErrorRecovery:NO];
                } else {
                    MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
                    @throw mse;
                }


                /* scopeSetAttributeRef */((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter =  true;


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:296:13:  // alt
                {

                            if ( ((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter ) {
                                [group.errMgr compileTimeError:REQUIRED_PARAMETER_AFTER_OPTIONAL templateToken:nil t:ID6];
                            }
                            


                }
                break;

        }


        [args addObject:[FormalArgument newFormalArgument:(ID6!=nil?ID6.text:nil)]];


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end formalArg */

/*
 * $ANTLR start dictDef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:314:1: dictDef : ID '::=' dict ;
 */
- (void) dictDef
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        STToken *ID7 = nil;
         AMutableDictionary * dict8 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:315:5: ( ID '::=' dict ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:315:9: ID '::=' dict // alt
        {
        ID7=(STToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_dictDef752]; 

        [self match:input TokenType:19 Follow:FOLLOW_19_in_dictDef754]; 

        /* ruleRef */
        [self pushFollow:FOLLOW_dict_in_dictDef756];
        dict8 = [self dict];

        [self popFollow];




                if ( [group rawGetDictionary:(ID7!=nil?ID7.text:nil)] != nil ) {
                    [group.errMgr compileTimeError:MAP_REDEFINITION templateToken:nil t:ID7];
                }
                else if ( [group rawGetTemplate:(ID7!=nil?ID7.text:nil)] != nil ) {
                    [group.errMgr compileTimeError:TEMPLATE_REDEFINITION_AS_MAP templateToken:nil t:ID7];
                }
                else {
                    [group defineDictionary:(ID7!=nil?ID7.text:nil) mapping:
        dict8
        ];
                }
                


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end dictDef */

/*
 * $ANTLR start dict
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:329:1: dict returns [AMutableDictionary *mapping] : '[' dictPairs[mapping] ']' ;
 */
- (AMutableDictionary *) dict
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    AMutableDictionary * mapping = nil ;


    mapping=[AMutableDictionary dictionaryWithCapacity:16];
    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:331:5: ( '[' dictPairs[mapping] ']' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:331:9: '[' dictPairs[mapping] ']' // alt
        {
        [self match:input TokenType:23 Follow:FOLLOW_23_in_dict794]; 

        /* ruleRef */
        [self pushFollow:FOLLOW_dictPairs_in_dict796];
        [self dictPairs:mapping ];

        [self popFollow];



        [self match:input TokenType:24 Follow:FOLLOW_24_in_dict799]; 

        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return mapping;
}
/* $ANTLR end dict */

/*
 * $ANTLR start dictPairs
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:334:1: dictPairs[AMutableDictionary *mapping] : ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] );
 */
- (void) dictPairs:(AMutableDictionary *)mapping 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:335:5: ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] ) //ruleblock
        NSInteger alt18=2;
        NSInteger LA18_0 = [input LA:1];

        if ( (LA18_0==STRING) ) {
            alt18=1;
        }
        else if ( (LA18_0==25) ) {
            alt18=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:18 state:0 stream:input];
            nvae.c = LA18_0;
            @throw nvae;

        }
        switch (alt18) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:335:9: keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_keyValuePair_in_dictPairs819];
                [self keyValuePair:mapping ];

                [self popFollow];



                do {
                    NSInteger alt16=2;
                    NSInteger LA16_0 = [input LA:1];
                    if ( (LA16_0==16) ) {
                        NSInteger LA16_1 = [input LA:2];
                        if ( (LA16_1==STRING) ) {
                            alt16=1;
                        }


                    }


                    switch (alt16) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:336:10: ',' keyValuePair[mapping] // alt
                            {
                            [self match:input TokenType:16 Follow:FOLLOW_16_in_dictPairs831]; 

                            /* ruleRef */
                            [self pushFollow:FOLLOW_keyValuePair_in_dictPairs833];
                            [self keyValuePair:mapping ];

                            [self popFollow];



                            }
                            break;

                        default :
                            goto loop16;
                    }
                } while (YES);
                loop16: ;


                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:336:38: ( ',' defaultValuePair[mapping] )? // block
                NSInteger alt17=2;
                NSInteger LA17_0 = [input LA:1];

                if ( (LA17_0==16) ) {
                    alt17=1;
                }
                switch (alt17) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:336:39: ',' defaultValuePair[mapping] // alt
                        {
                        [self match:input TokenType:16 Follow:FOLLOW_16_in_dictPairs839]; 

                        /* ruleRef */
                        [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs841];
                        [self defaultValuePair:mapping ];

                        [self popFollow];



                        }
                        break;

                }


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:337:9: defaultValuePair[mapping] // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs854];
                [self defaultValuePair:mapping ];

                [self popFollow];



                }
                break;

        }
        // token+rule list labels

    }
    @catch (RecognitionException *re) {

                [self error:[NSString stringWithFormat:@"missing dictionary entry at '%@'", [input LT:1].text]];
            
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end dictPairs */

/*
 * $ANTLR start defaultValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:343:1: defaultValuePair[AMutableDictionary *mapping] : 'default' ':' keyValue ;
 */
- (void) defaultValuePair:(AMutableDictionary *)mapping 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
         id keyValue9 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:344:5: ( 'default' ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:344:9: 'default' ':' keyValue // alt
        {
        [self match:input TokenType:25 Follow:FOLLOW_25_in_defaultValuePair884]; 

        [self match:input TokenType:18 Follow:FOLLOW_18_in_defaultValuePair886]; 

        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_defaultValuePair888];
        keyValue9 = [self keyValue];

        [self popFollow];



        [mapping setObject:keyValue9
         forKey:STGroup.DEFAULT_KEY];


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end defaultValuePair */

/*
 * $ANTLR start keyValuePair
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:347:1: keyValuePair[AMutableDictionary *mapping] : STRING ':' keyValue ;
 */
- (void) keyValuePair:(AMutableDictionary *)mapping 
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    @try {
        STToken *STRING11 = nil;
         id keyValue10 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:348:5: ( STRING ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:348:9: STRING ':' keyValue // alt
        {
        STRING11=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValuePair910]; 

        [self match:input TokenType:18 Follow:FOLLOW_18_in_keyValuePair912]; 

        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_keyValuePair914];
        keyValue10 = [self keyValue];

        [self popFollow];



        [mapping setObject:keyValue10
         forKey:[Misc replaceEscapes:[Misc strip:(STRING11!=nil?STRING11.text:nil) n:1]]];


        }

        // token+rule list labels

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* Terence's stuff */

    }
    return ;
}
/* $ANTLR end keyValuePair */

/*
 * $ANTLR start keyValue
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:351:1: keyValue returns [id value] : ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_TRUE | T_FALSE |{...}? => ID );
 */
- (id) keyValue
{
    /* my ruleScopeSetUp */
    /* Terence's stuff */

    id value = nil ;


    @try {
        STToken *BIGSTRING12 = nil;
        STToken *BIGSTRING_NO_NL13 = nil;
        STToken *ANONYMOUS_TEMPLATE14 = nil;
        STToken *STRING15 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:352:5: ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_TRUE | T_FALSE |{...}? => ID ) //ruleblock
        NSInteger alt19=7;
        NSInteger LA19_0 = [input LA:1];

        if ( (LA19_0==BIGSTRING) ) {
            alt19=1;
        }
        else if ( (LA19_0==BIGSTRING_NO_NL) ) {
            alt19=2;
        }
        else if ( (LA19_0==ANONYMOUS_TEMPLATE) ) {
            alt19=3;
        }
        else if ( (LA19_0==STRING) ) {
            alt19=4;
        }
        else if ( (LA19_0==T_TRUE) ) {
            alt19=5;
        }
        else if ( (LA19_0==T_FALSE) ) {
            alt19=6;
        }
        else if ( (LA19_0==ID) && (([[[input LT:1] text] isEqualToString:@"key"]))) {
            alt19=7;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:19 state:0 stream:input];
            nvae.c = LA19_0;
            @throw nvae;

        }
        switch (alt19) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:352:9: BIGSTRING // alt
                {
                BIGSTRING12=(STToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_keyValue939]; 

                value =  [group createSingleton:BIGSTRING12];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:353:9: BIGSTRING_NO_NL // alt
                {
                BIGSTRING_NO_NL13=(STToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_keyValue961]; 

                value =  [group createSingleton:BIGSTRING_NO_NL13];



                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:354:9: ANONYMOUS_TEMPLATE // alt
                {
                ANONYMOUS_TEMPLATE14=(STToken *)[self match:input TokenType:ANONYMOUS_TEMPLATE Follow:FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue977]; 

                value =  [group createSingleton:ANONYMOUS_TEMPLATE14];



                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:355:9: STRING // alt
                {
                STRING15=(STToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValue990]; 

                value =  [Misc replaceEscapes:[Misc strip:(STRING15!=nil?STRING15.text:nil) n:1]];



                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:356:9: T_TRUE // alt
                {
                [self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_keyValue1015]; 

                value =  (id)YES;



                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:357:9: T_FALSE // alt
                {
                [self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_keyValue1040]; 

                value =  NO;



                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/Group.g:358:9: {...}? => ID // alt
                {
                if ( !(([[[input LT:1] text] isEqualToString:@"key"])) ) {
                    @throw [FailedPredicateException newException:@"keyValue" predicate:@"[[[input LT:1] text] isEqualToString:@\"key\"]" stream:input];
                }

                [self match:input TokenType:ID Follow:FOLLOW_ID_in_keyValue1067]; 

                value =  STGroup.DICT_KEY;



                }
                break;

        }
        // token+rule list labels

    }
    @catch (RecognitionException *re) {

                [self error:[NSString stringWithFormat:@"missing value for key at '%@'", [[input LT:1] text]]];
            
    }

    @finally {
        /* Terence's stuff */

    }
    return value;
}
/* $ANTLR end keyValue */
/* ObjC end rules */

@end /* end of GroupParser implementation line 692 */
