/** \file
 *  This OBJC source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g
 *     -                            On : 2012-03-30 21:44:28
 *     -           for the tree parser : CodeGeneratorTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// $ANTLR 3.4 /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g 2012-03-30 21:44:28


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "CodeGenerator.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_template_in_templateAndEOF74;
static const unsigned long long FOLLOW_template_in_templateAndEOF74_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_templateAndEOF77;
static const unsigned long long FOLLOW_EOF_in_templateAndEOF77_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_chunk_in_template101;
static const unsigned long long FOLLOW_chunk_in_template101_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_element_in_chunk116;
static const unsigned long long FOLLOW_element_in_chunk116_data[] = { 0x0208208100004002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element129;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element129_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element131;
static const unsigned long long FOLLOW_INDENT_in_element131_data[] = { 0x0200000000004000LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element133;
static const unsigned long long FOLLOW_compoundElement_in_element133_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element141;
static const unsigned long long FOLLOW_compoundElement_in_element141_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element151;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element151_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element153;
static const unsigned long long FOLLOW_INDENT_in_element153_data[] = { 0x0000208100000000LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element157;
static const unsigned long long FOLLOW_singleElement_in_element157_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element165;
static const unsigned long long FOLLOW_singleElement_in_element165_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_exprElement_in_singleElement179;
static const unsigned long long FOLLOW_exprElement_in_singleElement179_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TEXT_in_singleElement184;
static const unsigned long long FOLLOW_TEXT_in_singleElement184_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_NEWLINE_in_singleElement193;
static const unsigned long long FOLLOW_NEWLINE_in_singleElement193_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ifstat_in_compoundElement207;
static const unsigned long long FOLLOW_ifstat_in_compoundElement207_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_region_in_compoundElement213;
static const unsigned long long FOLLOW_region_in_compoundElement213_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_EXPR_in_exprElement232;
static const unsigned long long FOLLOW_EXPR_in_exprElement232_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_exprElement234;
static const unsigned long long FOLLOW_expr_in_exprElement234_data[] = { 0x0040000000000008LL};
static ANTLRBitSet *FOLLOW_exprOptions_in_exprElement237;
static const unsigned long long FOLLOW_exprOptions_in_exprElement237_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_REGION_in_region275;
static const unsigned long long FOLLOW_REGION_in_region275_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_region277;
static const unsigned long long FOLLOW_ID_in_region277_data[] = { 0x0208208100004000LL};
static ANTLRBitSet *FOLLOW_template_in_region287;
static const unsigned long long FOLLOW_template_in_region287_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_SUBTEMPLATE_in_subtemplate320;
static const unsigned long long FOLLOW_SUBTEMPLATE_in_subtemplate320_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ARGS_in_subtemplate327;
static const unsigned long long FOLLOW_ARGS_in_subtemplate327_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_subtemplate330;
static const unsigned long long FOLLOW_ID_in_subtemplate330_data[] = { 0x0000000000000018LL};
static ANTLRBitSet *FOLLOW_template_in_subtemplate347;
static const unsigned long long FOLLOW_template_in_subtemplate347_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_SUBTEMPLATE_in_subtemplate363;
static const unsigned long long FOLLOW_SUBTEMPLATE_in_subtemplate363_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_IF_in_ifstat395;
static const unsigned long long FOLLOW_IF_in_ifstat395_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat397;
static const unsigned long long FOLLOW_conditional_in_ifstat397_data[] = { 0x020820810001C008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat407;
static const unsigned long long FOLLOW_chunk_in_ifstat407_data[] = { 0x0000000000018008LL};
static ANTLRBitSet *FOLLOW_ELSEIF_in_ifstat417;
static const unsigned long long FOLLOW_ELSEIF_in_ifstat417_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat431;
static const unsigned long long FOLLOW_conditional_in_ifstat431_data[] = { 0x0208208100004008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat443;
static const unsigned long long FOLLOW_chunk_in_ifstat443_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELSE_in_ifstat466;
static const unsigned long long FOLLOW_ELSE_in_ifstat466_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat480;
static const unsigned long long FOLLOW_chunk_in_ifstat480_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_OR_in_conditional514;
static const unsigned long long FOLLOW_OR_in_conditional514_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional516;
static const unsigned long long FOLLOW_conditional_in_conditional516_data[] = { 0x35B7D03000103050LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional518;
static const unsigned long long FOLLOW_conditional_in_conditional518_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_AND_in_conditional528;
static const unsigned long long FOLLOW_AND_in_conditional528_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional530;
static const unsigned long long FOLLOW_conditional_in_conditional530_data[] = { 0x35B7D03000103050LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional532;
static const unsigned long long FOLLOW_conditional_in_conditional532_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_BANG_in_conditional542;
static const unsigned long long FOLLOW_BANG_in_conditional542_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional544;
static const unsigned long long FOLLOW_conditional_in_conditional544_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_conditional556;
static const unsigned long long FOLLOW_expr_in_conditional556_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_OPTIONS_in_exprOptions570;
static const unsigned long long FOLLOW_OPTIONS_in_exprOptions570_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_option_in_exprOptions572;
static const unsigned long long FOLLOW_option_in_exprOptions572_data[] = { 0x0000000000400008LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_option584;
static const unsigned long long FOLLOW_EQUALS_in_option584_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_option586;
static const unsigned long long FOLLOW_ID_in_option586_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_option588;
static const unsigned long long FOLLOW_expr_in_option588_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ZIP_in_expr607;
static const unsigned long long FOLLOW_ZIP_in_expr607_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ELEMENTS_in_expr610;
static const unsigned long long FOLLOW_ELEMENTS_in_expr610_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr613;
static const unsigned long long FOLLOW_expr_in_expr613_data[] = { 0x35B7D00000003058LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr620;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr620_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MAP_in_expr632;
static const unsigned long long FOLLOW_MAP_in_expr632_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr634;
static const unsigned long long FOLLOW_expr_in_expr634_data[] = { 0x0400C00000000000LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr637;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr637_data[] = { 0x0400C00000000008LL};
static ANTLRBitSet *FOLLOW_prop_in_expr652;
static const unsigned long long FOLLOW_prop_in_expr652_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_includeExpr_in_expr657;
static const unsigned long long FOLLOW_includeExpr_in_expr657_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_PROP_in_prop667;
static const unsigned long long FOLLOW_PROP_in_prop667_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop669;
static const unsigned long long FOLLOW_expr_in_prop669_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_prop671;
static const unsigned long long FOLLOW_ID_in_prop671_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_PROP_IND_in_prop685;
static const unsigned long long FOLLOW_PROP_IND_in_prop685_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop687;
static const unsigned long long FOLLOW_expr_in_prop687_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_prop689;
static const unsigned long long FOLLOW_expr_in_prop689_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_mapTemplateRef709;
static const unsigned long long FOLLOW_INCLUDE_in_mapTemplateRef709_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_mapTemplateRef711;
static const unsigned long long FOLLOW_ID_in_mapTemplateRef711_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef721;
static const unsigned long long FOLLOW_args_in_mapTemplateRef721_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_mapTemplateRef734;
static const unsigned long long FOLLOW_subtemplate_in_mapTemplateRef734_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_mapTemplateRef746;
static const unsigned long long FOLLOW_INCLUDE_IND_in_mapTemplateRef746_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_mapTemplateRef748;
static const unsigned long long FOLLOW_expr_in_mapTemplateRef748_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef758;
static const unsigned long long FOLLOW_args_in_mapTemplateRef758_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_EXEC_FUNC_in_includeExpr780;
static const unsigned long long FOLLOW_EXEC_FUNC_in_includeExpr780_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr782;
static const unsigned long long FOLLOW_ID_in_includeExpr782_data[] = { 0x35B7D00000003058LL};
static ANTLRBitSet *FOLLOW_expr_in_includeExpr784;
static const unsigned long long FOLLOW_expr_in_includeExpr784_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_includeExpr795;
static const unsigned long long FOLLOW_INCLUDE_in_includeExpr795_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr797;
static const unsigned long long FOLLOW_ID_in_includeExpr797_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr799;
static const unsigned long long FOLLOW_args_in_includeExpr799_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_in_includeExpr810;
static const unsigned long long FOLLOW_INCLUDE_SUPER_in_includeExpr810_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr812;
static const unsigned long long FOLLOW_ID_in_includeExpr812_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr814;
static const unsigned long long FOLLOW_args_in_includeExpr814_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_REGION_in_includeExpr825;
static const unsigned long long FOLLOW_INCLUDE_REGION_in_includeExpr825_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr827;
static const unsigned long long FOLLOW_ID_in_includeExpr827_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr837;
static const unsigned long long FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr837_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr839;
static const unsigned long long FOLLOW_ID_in_includeExpr839_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_primary_in_includeExpr847;
static const unsigned long long FOLLOW_primary_in_includeExpr847_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_primary858;
static const unsigned long long FOLLOW_ID_in_primary858_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_primary868;
static const unsigned long long FOLLOW_STRING_in_primary868_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_primary878;
static const unsigned long long FOLLOW_T_TRUE_in_primary878_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_primary887;
static const unsigned long long FOLLOW_T_FALSE_in_primary887_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_primary896;
static const unsigned long long FOLLOW_subtemplate_in_primary896_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_list_in_primary923;
static const unsigned long long FOLLOW_list_in_primary923_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_primary930;
static const unsigned long long FOLLOW_INCLUDE_IND_in_primary930_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary935;
static const unsigned long long FOLLOW_expr_in_primary935_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_primary949;
static const unsigned long long FOLLOW_args_in_primary949_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_TO_STR_in_primary969;
static const unsigned long long FOLLOW_TO_STR_in_primary969_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary971;
static const unsigned long long FOLLOW_expr_in_primary971_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_arg984;
static const unsigned long long FOLLOW_expr_in_arg984_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_arg_in_args1000;
static const unsigned long long FOLLOW_arg_in_args1000_data[] = { 0x35B7D00000003052LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_args1019;
static const unsigned long long FOLLOW_EQUALS_in_args1019_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_args1021;
static const unsigned long long FOLLOW_ID_in_args1021_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_args1023;
static const unsigned long long FOLLOW_expr_in_args1023_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELLIPSIS_in_args1040;
static const unsigned long long FOLLOW_ELLIPSIS_in_args1040_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ELLIPSIS_in_args1055;
static const unsigned long long FOLLOW_ELLIPSIS_in_args1055_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LIST_in_list1075;
static const unsigned long long FOLLOW_LIST_in_list1075_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_listElement_in_list1078;
static const unsigned long long FOLLOW_listElement_in_list1078_data[] = { 0x3DB7D00000003058LL};
static ANTLRBitSet *FOLLOW_expr_in_listElement1094;
static const unsigned long long FOLLOW_expr_in_listElement1094_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TNULL_in_listElement1098;
static const unsigned long long FOLLOW_TNULL_in_listElement1098_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global globalAttributeScopeImplementation

#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
@implementation template_Scope  /* start of ruleAttributeScopeImplementation */
@synthesize cstate; 

+ (template_Scope *)newtemplate_Scope
{
return [[template_Scope alloc] init];
}

- (id) init
{
self = [super init];
return self;
}

/* start of template_Scope get and set functions */
- (CompilationState *)getcstate { return( cstate ); }
- (void)setcstate:(CompilationState *)aVal { cstate = aVal; }

/* End of template_Scope get and set functions */
@end /* end of ruleAttributeScopeImplementation */



#pragma mark Rule Return Scopes returnScopeImplementation
@implementation CodeGenerator_region_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name; 
+ (CodeGenerator_region_return *)newCodeGenerator_region_return
{
return [[[CodeGenerator_region_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}


/* start of iterate get and set functions */
- (NSString *)getname { return( name ); }
- (void)setname:(NSString *)aVal { name = aVal; }

/* End of iterate get and set functions */

@end /* end of returnScope implementation */

@implementation CodeGenerator_subtemplate_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
@synthesize nargs; 
+ (CodeGenerator_subtemplate_return *)newCodeGenerator_subtemplate_return
{
return [[[CodeGenerator_subtemplate_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}


/* start of iterate get and set functions */
- (NSString *)getname { return( name ); }
- (void)setname:(NSString *)aVal { name = aVal; }

- (NSInteger)getnargs { return( nargs ); }
- (void)setnargs:(NSInteger)aVal { nargs = aVal; }

/* End of iterate get and set functions */

@end /* end of returnScope implementation */

@implementation CodeGenerator_conditional_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_conditional_return *)newCodeGenerator_conditional_return
{
return [[[CodeGenerator_conditional_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}



@end /* end of returnScope implementation */

@implementation CodeGenerator_mapTemplateRef_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_mapTemplateRef_return *)newCodeGenerator_mapTemplateRef_return
{
return [[[CodeGenerator_mapTemplateRef_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}



@end /* end of returnScope implementation */

@implementation CodeGenerator_includeExpr_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_includeExpr_return *)newCodeGenerator_includeExpr_return
{
return [[[CodeGenerator_includeExpr_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}



@end /* end of returnScope implementation */

@implementation CodeGenerator_primary_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_primary_return *)newCodeGenerator_primary_return
{
return [[[CodeGenerator_primary_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}



@end /* end of returnScope implementation */

@implementation CodeGenerator_args_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize n;
@synthesize namedArgs;
@synthesize passThru; 
+ (CodeGenerator_args_return *)newCodeGenerator_args_return
{
return [[[CodeGenerator_args_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}


/* start of iterate get and set functions */
- (NSInteger)getn { return( n ); }
- (void)setn:(NSInteger)aVal { n = aVal; }

- (BOOL)getnamedArgs { return( namedArgs ); }
- (void)setnamedArgs:(BOOL)aVal { namedArgs = aVal; }

- (BOOL)getpassThru { return( passThru ); }
- (void)setpassThru:(BOOL)aVal { passThru = aVal; }

/* End of iterate get and set functions */

@end /* end of returnScope implementation */

@implementation CodeGenerator_listElement_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_listElement_return *)newCodeGenerator_listElement_return
{
return [[[CodeGenerator_listElement_return alloc] init] retain];
}

- (id) init
{
self = [super init];
return self;
}



@end /* end of returnScope implementation */



@implementation CodeGenerator  // line 637

/* ObjC start of ruleAttributeScope */
#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ruleAttributeScope */
static SymbolStack *template_stack;
static template_Scope *template_scope;
/* ObjC end of ruleAttributeScope */
#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

	@synthesize template_scope;
	@synthesize outermostTemplateName; // name of overall template
	@synthesize outermostImpl;
	@synthesize templateToken;// overall template token
	@synthesize template; // overall template text
	@synthesize errMgr;

/* ObjC start synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_template_in_templateAndEOF74 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_templateAndEOF74_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_templateAndEOF77 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_templateAndEOF77_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_template101 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_template101_data Count:(NSUInteger)1] retain];
    FOLLOW_element_in_chunk116 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_element_in_chunk116_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element129 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element129_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element131 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element131_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element133 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element133_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element141 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element141_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element151 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element151_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element153 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element153_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element157 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element157_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element165_data Count:(NSUInteger)1] retain];
    FOLLOW_exprElement_in_singleElement179 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exprElement_in_singleElement179_data Count:(NSUInteger)1] retain];
    FOLLOW_TEXT_in_singleElement184 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TEXT_in_singleElement184_data Count:(NSUInteger)1] retain];
    FOLLOW_NEWLINE_in_singleElement193 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_NEWLINE_in_singleElement193_data Count:(NSUInteger)1] retain];
    FOLLOW_ifstat_in_compoundElement207 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ifstat_in_compoundElement207_data Count:(NSUInteger)1] retain];
    FOLLOW_region_in_compoundElement213 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_region_in_compoundElement213_data Count:(NSUInteger)1] retain];
    FOLLOW_EXPR_in_exprElement232 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EXPR_in_exprElement232_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_exprElement234 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_exprElement234_data Count:(NSUInteger)1] retain];
    FOLLOW_exprOptions_in_exprElement237 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exprOptions_in_exprElement237_data Count:(NSUInteger)1] retain];
    FOLLOW_REGION_in_region275 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_REGION_in_region275_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_region277 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_region277_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_region287 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_region287_data Count:(NSUInteger)1] retain];
    FOLLOW_SUBTEMPLATE_in_subtemplate320 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_SUBTEMPLATE_in_subtemplate320_data Count:(NSUInteger)1] retain];
    FOLLOW_ARGS_in_subtemplate327 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ARGS_in_subtemplate327_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_subtemplate330 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_subtemplate330_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_subtemplate347 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_subtemplate347_data Count:(NSUInteger)1] retain];
    FOLLOW_SUBTEMPLATE_in_subtemplate363 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_SUBTEMPLATE_in_subtemplate363_data Count:(NSUInteger)1] retain];
    FOLLOW_IF_in_ifstat395 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_IF_in_ifstat395_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat397 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat397_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat407 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat407_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSEIF_in_ifstat417 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELSEIF_in_ifstat417_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat431 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat431_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat443 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat443_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSE_in_ifstat466 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELSE_in_ifstat466_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat480 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat480_data Count:(NSUInteger)1] retain];
    FOLLOW_OR_in_conditional514 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_OR_in_conditional514_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional516 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional516_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional518 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional518_data Count:(NSUInteger)1] retain];
    FOLLOW_AND_in_conditional528 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_AND_in_conditional528_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional530 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional530_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional532 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional532_data Count:(NSUInteger)1] retain];
    FOLLOW_BANG_in_conditional542 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BANG_in_conditional542_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional544 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional544_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_conditional556 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_conditional556_data Count:(NSUInteger)1] retain];
    FOLLOW_OPTIONS_in_exprOptions570 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_OPTIONS_in_exprOptions570_data Count:(NSUInteger)1] retain];
    FOLLOW_option_in_exprOptions572 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_option_in_exprOptions572_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_option584 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_option584_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_option586 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_option586_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_option588 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_option588_data Count:(NSUInteger)1] retain];
    FOLLOW_ZIP_in_expr607 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ZIP_in_expr607_data Count:(NSUInteger)1] retain];
    FOLLOW_ELEMENTS_in_expr610 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELEMENTS_in_expr610_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr613 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr613_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr620 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr620_data Count:(NSUInteger)1] retain];
    FOLLOW_MAP_in_expr632 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MAP_in_expr632_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr634 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr634_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr637 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr637_data Count:(NSUInteger)1] retain];
    FOLLOW_prop_in_expr652 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_prop_in_expr652_data Count:(NSUInteger)1] retain];
    FOLLOW_includeExpr_in_expr657 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_includeExpr_in_expr657_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_in_prop667 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_in_prop667_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop669 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop669_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_prop671 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_prop671_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_IND_in_prop685 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_IND_in_prop685_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop687 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop687_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop689 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop689_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_mapTemplateRef709 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_mapTemplateRef709_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_mapTemplateRef711 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_mapTemplateRef711_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef721 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef721_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_mapTemplateRef734 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_mapTemplateRef734_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_mapTemplateRef746 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_mapTemplateRef746_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_mapTemplateRef748 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_mapTemplateRef748_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef758 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef758_data Count:(NSUInteger)1] retain];
    FOLLOW_EXEC_FUNC_in_includeExpr780 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EXEC_FUNC_in_includeExpr780_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr782 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr782_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_includeExpr784 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_includeExpr784_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_includeExpr795 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_includeExpr795_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr797 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr797_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr799 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr799_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_in_includeExpr810 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_in_includeExpr810_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr812 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr812_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr814 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr814_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_REGION_in_includeExpr825 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_REGION_in_includeExpr825_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr827 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr827_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr837 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr837_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr839 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr839_data Count:(NSUInteger)1] retain];
    FOLLOW_primary_in_includeExpr847 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_primary_in_includeExpr847_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_primary858 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_primary858_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_primary868 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_primary868_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_primary878 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_primary878_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_primary887 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_primary887_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_primary896 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_primary896_data Count:(NSUInteger)1] retain];
    FOLLOW_list_in_primary923 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_list_in_primary923_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_primary930 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_primary930_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary935 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary935_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_primary949 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_primary949_data Count:(NSUInteger)1] retain];
    FOLLOW_TO_STR_in_primary969 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TO_STR_in_primary969_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary971 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary971_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_arg984 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_arg984_data Count:(NSUInteger)1] retain];
    FOLLOW_arg_in_args1000 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_arg_in_args1000_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_args1019 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_args1019_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_args1021 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_args1021_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_args1023 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_args1023_data Count:(NSUInteger)1] retain];
    FOLLOW_ELLIPSIS_in_args1040 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELLIPSIS_in_args1040_data Count:(NSUInteger)1] retain];
    FOLLOW_ELLIPSIS_in_args1055 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELLIPSIS_in_args1055_data Count:(NSUInteger)1] retain];
    FOLLOW_LIST_in_list1075 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LIST_in_list1075_data Count:(NSUInteger)1] retain];
    FOLLOW_listElement_in_list1078 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_listElement_in_list1078_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_listElement1094 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_listElement1094_data Count:(NSUInteger)1] retain];
    FOLLOW_TNULL_in_listElement1098 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TNULL_in_listElement1098_data Count:(NSUInteger)1] retain];

    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"BIGSTRING_NO_NL", @"T_FALSE", @"T_TRUE", @"IF", @"ELSE", 
 @"ELSEIF", @"ENDIF", @"SUPER", @"SEMI", @"BANG", @"ELLIPSIS", @"EQUALS", 
 @"COLON", @"LPAREN", @"RPAREN", @"LBRACK", @"RBRACK", @"COMMA", @"DOT", 
 @"LCURLY", @"RCURLY", @"TEXT", @"LDELIM", @"RDELIM", @"PIPE", @"OR", @"AND", 
 @"INDENT", @"NEWLINE", @"AT", @"END", @"ARGS", @"ELEMENTS", @"EXEC_FUNC", 
 @"EXPR", @"INCLUDE", @"INCLUDE_IND", @"INCLUDE_REGION", @"INCLUDE_SUPER", 
 @"INCLUDE_SUPER_REGION", @"INDENTED_EXPR", @"LIST", @"MAP", @"OPTIONS", 
 @"PROP", @"PROP_IND", @"REGION", @"SUBTEMPLATE", @"TNULL", @"TO_STR", @"ZIP", nil] retain]];
    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g"];
}

+ (CodeGenerator *)newCodeGenerator:(id<TreeNodeStream>)aStream
{
    return [[CodeGenerator alloc] initWithStream:aStream];
}

/* ObjC start actions.(actionScope).methods */

+ (id) newCodeGenerator:(id<TreeNodeStream>)anInput
                 errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(CommonToken *)aTemplateToken
{
    return [[[CodeGenerator alloc] init:anInput
                                errMgr:anErrMgr
                                  name:aName
                              template:aTemplate
                                 token:aTemplateToken] retain];
}

- (id) initWithStream:(id<TreeNodeStream>)aStream
{
    self = [super initWithStream:aStream State:[[RecognizerSharedState newRecognizerSharedStateWithRuleLen:22+1] retain]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [template_Scope newtemplate_Scope];
        template_stack = [SymbolStack newSymbolStackWithLen:30];

        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (id) init:(id<TreeNodeStream>)anInput
                     errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(CommonToken *)aTemplateToken
{
    self=[super initWithStream:anInput State:[RecognizerSharedState newRecognizerSharedState]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [[template_Scope newtemplate_Scope] retain];
        template_stack = [[SymbolStack newSymbolStackWithLen:30] retain];
        errMgr = anErrMgr;
        if ( errMgr ) [errMgr retain];
        outermostTemplateName = aName;
        if ( outermostTemplateName ) [outermostTemplateName retain];
        template = aTemplate;
        if ( template ) [template retain];
        templateToken = aTemplateToken;
        if ( templateToken ) [templateToken retain];
    }
    return self;
}

- (void) dealloc
{
#ifdef DEBUG_DEALLOC
    NSLog( @"called dealloc in CodeGenerator" );
#endif
    if ( template_scope ) [template_scope release];
    if ( outermostTemplateName ) [outermostTemplateName release];
    if ( outermostImpl ) [outermostImpl release];
    if ( templateToken ) [templateToken release];
    if ( template ) [template release];
    if ( errMgr ) [errMgr release];
    [super dealloc];
}

// convience funcs to hide offensive sending of emit messages to
// CompilationState temp data object.

- (void) emit1:(CommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode arg:arg];
}

- (void) emit1:(CommonTree *)opAST opcode:(short)anOpcode s:(NSString *)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode s:arg];
}

- (void) emit2:(CommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)anArg arg2:(NSInteger)anArg2
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode arg:anArg arg2:anArg2];
}

- (void) emit2:(CommonTree *)opAST opcode:(short)anOpcode s:(NSString *)s arg2:(NSInteger)anArg
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode s:s arg2:anArg];
}

- (void) emit:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:anOpcode];
}

- (void) emit:(CommonTree *)opAST opcode:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:opAST opcode:anOpcode];
}

- (void) insert:(NSInteger)addr opcode:(short)anOpcode s:(NSString *)s
{
    [((template_Scope *)[template_stack peek]).cstate insert:addr opcode:anOpcode s:s];
}

- (void) setOption:(CommonTree *)anID
{
    [((template_Scope *)[template_stack peek]).cstate setOption:anID];
}

- (void) write:(NSInteger)addr value:(short)value
{
    [((template_Scope *)[template_stack peek]).cstate write:addr value:value];
}

- (NSInteger) address { return ((template_Scope *)[template_stack peek]).cstate.ip; }
- (void) func:(CommonTree *)aTree { [((template_Scope *)[template_stack peek]).cstate func:templateToken tree:aTree]; }
- (void) refAttr:(CommonTree *)aTree { [((template_Scope *)[template_stack peek]).cstate refAttr:templateToken tree:aTree]; }
- (NSInteger) defineString:(NSString *)s { return [((template_Scope *)[template_stack peek]).cstate defineString:s]; }

/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */
/*
 * $ANTLR start templateAndEOF
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:238:1: templateAndEOF : template[nil ,nil] EOF ;
 */
- (void) templateAndEOF
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:238:16: ( template[nil ,nil] EOF ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:238:18: template[nil ,nil] EOF // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_template_in_templateAndEOF74];
        [self template:nil arg1:nil];

        [self popFollow];


         
        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_templateAndEOF77]; 
         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end templateAndEOF */

/*
 * $ANTLR start template
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:240:1: template[NSString *name, AMutableArray *args] returns [CompiledST *impl] : chunk ;
 */
- (CompiledST *) template:(NSString *)name arg1:(AMutableArray *)args 
{
    /* ruleScopeSetUp */
    [template_stack push:[template_Scope newtemplate_Scope]];
    /* ruleDeclarations */
    CompiledST * impl = nil ;



    /* scopeSetAttributeRef */
    ((template_Scope *)[template_stack peek]).cstate =  [[CompilationState newCompilationState:errMgr name:name stream:[input getTokenStream]] retain];
    impl =  ((template_Scope *)[template_stack peek]).cstate.impl;
    if ( [template_stack count] == 1 )
        outermostImpl = impl;
    [impl defineFormalArgs:args]; // make sure args are defined prior to compilation
    if ( name != nil && [name hasPrefix:Compiler.SUBTEMPLATE_PREFIX] ) {
        [impl addArg:[FormalArgument newFormalArgument:@"i"]];
        [impl addArg:[FormalArgument newFormalArgument:@"i0"]];
    }
    impl.template = template; // always forget the entire template; char indexes are relative to it

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:255:2: ( chunk ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:255:4: chunk // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_chunk_in_template101];
        [self chunk];

        [self popFollow];


         // finish off the CompiledST result
        if ( ((template_Scope *)[template_stack peek]).cstate.stringtable != nil )
            impl.strings = [[((template_Scope *)[template_stack peek]).cstate.stringtable keySet] toArray];
        impl.codeSize = ((template_Scope *)[template_stack peek]).cstate.ip;
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */
        [template_stack pop];
    }
    return impl;
}
/* $ANTLR end template */

/*
 * $ANTLR start chunk
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:262:1: chunk : ( element )* ;
 */
- (void) chunk
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:263:2: ( ( element )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:263:4: ( element )* // alt
        {


        do {
            NSInteger alt1=2;
            NSInteger LA1_0 = [input LA:1];
            if ( (LA1_0==IF||LA1_0==TEXT||LA1_0==NEWLINE||LA1_0==EXPR||LA1_0==INDENTED_EXPR||LA1_0==REGION) ) {
                alt1=1;
            }


            switch (alt1) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:263:4: element // alt
                    {

                    /* ruleRef */
                    [self pushFollow:FOLLOW_element_in_chunk116];
                    [self element];

                    [self popFollow];


                     
                    }
                    break;

                default :
                    goto loop1;
            }
        } while (YES);
        loop1: ;

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end chunk */

/*
 * $ANTLR start element
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:266:1: element : ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement );
 */
- (void) element
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonTree *INDENT1 = nil;
        CommonTree *INDENT2 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:267:2: ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement ) //ruleblock
        NSInteger alt2=4;
        unichar charLA2 = [input LA:1];
        switch (charLA2) {
            case INDENTED_EXPR: ;
                {
                NSInteger LA2_1 = [input LA:2];

                if ( (LA2_1==DOWN) ) {
                    NSInteger LA2_4 = [input LA:3];

                    if ( (LA2_4==INDENT) ) {
                        NSInteger LA2_5 = [input LA:4];

                        if ( (LA2_5==IF||LA2_5==REGION) ) {
                            alt2=1;
                        }
                        else if ( (LA2_5==TEXT||LA2_5==NEWLINE||LA2_5==EXPR) ) {
                            alt2=3;
                        }
                        else {
                            NoViableAltException *nvae = [NoViableAltException newException:2 state:5 stream:input];
                            nvae.c = LA2_5;
                            @throw nvae;

                        }
                    }
                    else {
                        NoViableAltException *nvae = [NoViableAltException newException:2 state:4 stream:input];
                        nvae.c = LA2_4;
                        @throw nvae;

                    }
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:2 state:1 stream:input];
                    nvae.c = LA2_1;
                    @throw nvae;

                }
                }
                break;
            case IF: ;
            case REGION: ;
                {
                alt2=2;
                }
                break;
            case TEXT: ;
            case NEWLINE: ;
            case EXPR: ;
                {
                alt2=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
            nvae.c = charLA2;
            @throw nvae;

        }

        switch (alt2) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:267:4: ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) // alt
                {


                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element129]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    INDENT1=(CommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element131]; 
                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_compoundElement_in_element133];
                    [self compoundElement:INDENT1 ];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:268:4: compoundElement[nil] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_compoundElement_in_element141];
                [self compoundElement:nil ];

                [self popFollow];


                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:269:7: ^( INDENTED_EXPR INDENT singleElement ) // alt
                {


                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element151]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    INDENT2=(CommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element153]; 
                     

                    [((template_Scope *)[template_stack peek]).cstate indent:INDENT2];

                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_singleElement_in_element157];
                    [self singleElement];

                    [self popFollow];


                     

                    [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];

                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:270:4: singleElement // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_singleElement_in_element165];
                [self singleElement];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end element */

/*
 * $ANTLR start singleElement
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:273:1: singleElement : ( exprElement | TEXT | NEWLINE );
 */
- (void) singleElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonTree *TEXT3 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:274:2: ( exprElement | TEXT | NEWLINE ) //ruleblock
        NSInteger alt3=3;
        unichar charLA3 = [input LA:1];
        switch (charLA3) {
            case EXPR: ;
                {
                alt3=1;
                }
                break;
            case TEXT: ;
                {
                alt3=2;
                }
                break;
            case NEWLINE: ;
                {
                alt3=3;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:3 state:0 stream:input];
            nvae.c = charLA3;
            @throw nvae;

        }

        switch (alt3) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:274:4: exprElement // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_exprElement_in_singleElement179];
                [self exprElement];

                [self popFollow];


                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:275:4: TEXT // alt
                {

                TEXT3=(CommonTree *)[self match:input TokenType:TEXT Follow:FOLLOW_TEXT_in_singleElement184]; 
                 


                		if ( [(TEXT3!=nil?TEXT3.text:nil) length]>0 ) {
                            [self emit1:TEXT3 opcode:Bytecode.INSTR_WRITE_STR s:(TEXT3!=nil?TEXT3.text:nil)];
                		}
                        

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:281:4: NEWLINE // alt
                {

                [self match:input TokenType:NEWLINE Follow:FOLLOW_NEWLINE_in_singleElement193]; 
                 

                [self emit:Bytecode.INSTR_NEWLINE];

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end singleElement */

/*
 * $ANTLR start compoundElement
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:284:1: compoundElement[CommonTree *indent] : ( ifstat[indent] | region[indent] );
 */
- (void) compoundElement:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:285:2: ( ifstat[indent] | region[indent] ) //ruleblock
        NSInteger alt4=2;
        NSInteger LA4_0 = [input LA:1];

        if ( (LA4_0==IF) ) {
            alt4=1;
        }
        else if ( (LA4_0==REGION) ) {
            alt4=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
            nvae.c = LA4_0;
            @throw nvae;

        }
        switch (alt4) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:285:4: ifstat[indent] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_ifstat_in_compoundElement207];
                [self ifstat:indent ];

                [self popFollow];


                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:286:4: region[indent] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_region_in_compoundElement213];
                [self region:indent ];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end compoundElement */

/*
 * $ANTLR start exprElement
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:289:1: exprElement : ^( EXPR expr ( exprOptions )? ) ;
 */
- (void) exprElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

     short op = Bytecode.INSTR_WRITE; 
    @try {
        /* ruleLabelDefs entry */
        CommonTree *EXPR4 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:291:2: ( ^( EXPR expr ( exprOptions )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:291:4: ^( EXPR expr ( exprOptions )? ) // alt
        {


        EXPR4=(CommonTree *)[self match:input TokenType:EXPR Follow:FOLLOW_EXPR_in_exprElement232]; 
         
            [self match:input TokenType:DOWN Follow:nil]; 

            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_exprElement234];
            [self expr];

            [self popFollow];


             
            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:291:17: ( exprOptions )? // block
            NSInteger alt5=2;
            NSInteger LA5_0 = [input LA:1];

            if ( (LA5_0==OPTIONS) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:291:18: exprOptions // alt
                    {

                    /* ruleRef */
                    [self pushFollow:FOLLOW_exprOptions_in_exprElement237];
                    [self exprOptions];

                    [self popFollow];


                     

                    op=Bytecode.INSTR_WRITE_OPT;

                     
                    }
                    break;

            }

             
            [self match:input TokenType:UP Follow:nil]; 

         

        [self emit:EXPR4 opcode:op];

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end exprElement */

/*
 * $ANTLR start region
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:295:1: region[CommonTree *indent] returns [NSString *name] : ^( REGION ID template[$name,nil] ) ;
 */
- (CodeGenerator_region_return *) region:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_region_return * retval = [CodeGenerator_region_return newCodeGenerator_region_return];
    [retval setStart:[input LT:1]];



        if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        /* ruleLabelDefs entry */
        CommonTree *ID5 = nil;

        CompiledST * template6 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:302:2: ( ^( REGION ID template[$name,nil] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:302:4: ^( REGION ID template[$name,nil] ) // alt
        {


        [self match:input TokenType:REGION Follow:FOLLOW_REGION_in_region275]; 
         
            [self match:input TokenType:DOWN Follow:nil]; 

            ID5=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_region277]; 
             

            retval.name = [STGroup getMangledRegionName:outermostTemplateName name:(ID5!=nil?ID5.text:nil)]; /* added to returnSetAttributeRef */


             
            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_region287];
            template6 = [self template:retval.name  /* added to returnAttributeRef */
             arg1:nil];

            [self popFollow];


             


            CompiledST *sub = template6;
            sub.isRegion = true;
            sub.regionDefType = /* ST.RegionType. */ EMBEDDED;
            sub.templateDefStartToken = ID5.token;
            //sub.dump();
            [outermostImpl addImplicitlyDefinedTemplate:sub];
            [self emit2:((CommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:retval.name  /* added to returnAttributeRef */arg2:0];
            [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_WRITE];
            			

             
            [self match:input TokenType:UP Follow:nil]; 

         
        }

        /* token+rule list labels */



            if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];


    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end region */

/*
 * $ANTLR start subtemplate
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:318:1: subtemplate returns [NSString *name, NSInteger nargs] : ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) | SUBTEMPLATE );
 */
- (CodeGenerator_subtemplate_return *) subtemplate
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_subtemplate_return * retval = [CodeGenerator_subtemplate_return newCodeGenerator_subtemplate_return];
    [retval setStart:[input LT:1]];



        retval.name = [Compiler getNewSubtemplateName]; /* added to returnSetAttributeRef */

    	AMutableArray *args = [AMutableArray arrayWithCapacity:5];

    @try {
        /* ruleLabelDefs entry */
        CommonTree *ID7 = nil;
        CommonTree *SUBTEMPLATE9 = nil;
        CommonTree *SUBTEMPLATE10 = nil;

        CompiledST * template8 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:323:2: ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) | SUBTEMPLATE ) //ruleblock
        NSInteger alt8=2;
        NSInteger LA8_0 = [input LA:1];

        if ( (LA8_0==SUBTEMPLATE) ) {
            NSInteger LA8_1 = [input LA:2];

            if ( (LA8_1==DOWN) ) {
                alt8=1;
            }
            else if ( ((LA8_1 >= UP && LA8_1 <= ID)||LA8_1==STRING||(LA8_1 >= T_FALSE && LA8_1 <= ELSEIF)||(LA8_1 >= BANG && LA8_1 <= EQUALS)||LA8_1==TEXT||(LA8_1 >= OR && LA8_1 <= AND)||LA8_1==NEWLINE||(LA8_1 >= EXEC_FUNC && LA8_1 <= ZIP)) ) {
                alt8=2;
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:8 state:1 stream:input];
                nvae.c = LA8_1;
                @throw nvae;

            }
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:8 state:0 stream:input];
            nvae.c = LA8_0;
            @throw nvae;

        }
        switch (alt8) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:323:4: ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) // alt
                {


                SUBTEMPLATE9=(CommonTree *)[self match:input TokenType:SUBTEMPLATE Follow:FOLLOW_SUBTEMPLATE_in_subtemplate320]; 
                 
                if ( [input LA:1] == DOWN ) {
                    [self match:input TokenType:DOWN Follow:nil]; 


                    do {
                        NSInteger alt7=2;
                        NSInteger LA7_0 = [input LA:1];
                        if ( (LA7_0==ARGS) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                            case 1 : ;
                                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:324:5: ^( ARGS ( ID )+ ) // alt
                                {


                                [self match:input TokenType:ARGS Follow:FOLLOW_ARGS_in_subtemplate327]; 
                                 
                                    [self match:input TokenType:DOWN Follow:nil]; 

                                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:324:12: ( ID )+ // positiveClosureBlock
                                    NSInteger cnt6 = 0;
                                    do {
                                        NSInteger alt6 = 2;
                                        NSInteger LA6_0 = [input LA:1];
                                        if ( (LA6_0==ID) ) {
                                            alt6=1;
                                        }


                                        switch (alt6) {
                                            case 1 : ;
                                                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:324:13: ID // alt
                                                {

                                                ID7=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_subtemplate330]; 
                                                 

                                                [args addObject:[FormalArgument newFormalArgument:(ID7!=nil?ID7.text:nil)]];

                                                 
                                                }
                                                break;

                                            default :
                                                if ( cnt6 >= 1 )
                                                    goto loop6;
                                                EarlyExitException *eee =
                                                    [EarlyExitException newException:input decisionNumber:6];
                                                @throw eee;
                                        }
                                        cnt6++;
                                    } while (YES);
                                    loop6: ;

                                     
                                    [self match:input TokenType:UP Follow:nil]; 

                                 
                                }
                                break;

                            default :
                                goto loop7;
                        }
                    } while (YES);
                    loop7: ;

                     

                    retval.nargs = [args count]; /* added to returnSetAttributeRef */


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_template_in_subtemplate347];
                    template8 = [self template:retval.name arg1:args]; /* added to returnAttributeRef */

                    [self popFollow];


                     


                    CompiledST *sub = template8;
                    sub.isAnonSubtemplate = YES;
                    sub.templateDefStartToken = SUBTEMPLATE9.token;
                    sub.ast = SUBTEMPLATE9;
                    [sub.ast setUnknownTokenBoundaries];
                    sub.tokens = [input getTokenStream];
                    //sub.dump();
                    [outermostImpl addImplicitlyDefinedTemplate:sub];
                    			

                     
                    [self match:input TokenType:UP Follow:nil]; 
                }

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:338:4: SUBTEMPLATE // alt
                {

                SUBTEMPLATE10=(CommonTree *)[self match:input TokenType:SUBTEMPLATE Follow:FOLLOW_SUBTEMPLATE_in_subtemplate363]; 
                 


                CompiledST *sub = [CompiledST newCompiledST];
                sub.name = retval.name;  /* added to returnAttributeRef */
                sub.template = @"";
                [sub addArg:[FormalArgument newFormalArgument:@"i"]];
                [sub addArg:[FormalArgument newFormalArgument:@"i0"]];
                sub.isAnonSubtemplate = YES;
                sub.templateDefStartToken = SUBTEMPLATE10.token;
                sub.ast = SUBTEMPLATE10;
                [sub.ast setUnknownTokenBoundaries];
                sub.tokens = [input getTokenStream];
                //sub.dump();
                [outermostImpl addImplicitlyDefinedTemplate:sub];
                			

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end subtemplate */

/*
 * $ANTLR start ifstat
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:355:1: ifstat[CommonTree *indent] : ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ;
 */
- (void) ifstat:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */


        /** Tracks address of branch operand (in code block).  It's how
         *  we backpatch forward references when generating code for IFs.
         */
        NSInteger prevBranchOperand = -1;
        /** Branch instruction operands that are forward refs to end of IF.
         *  We need to update them once we see the endif.
         */
        IntArray *endRefs = [[IntArray newArrayWithLen:16] retain];
        if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        /* ruleLabelDefs entry */
        CommonTree *i = nil;
        CommonTree *eif = nil;
        CommonTree *el = nil;

        CodeGenerator_conditional_return * ec = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:370:2: ( ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:370:4: ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) // alt
        {


        i=(CommonTree *)[self match:input TokenType:IF Follow:FOLLOW_IF_in_ifstat395]; 
         
            [self match:input TokenType:DOWN Follow:nil]; 

            /* ruleRef */
            [self pushFollow:FOLLOW_conditional_in_ifstat397];
            [self conditional];

            [self popFollow];


             


            	        prevBranchOperand = [self address]+1;
            	        [self emit1:i opcode:Bytecode.INSTR_BRF arg:-1]; // write placeholder as branch target
            			

             
            /* ruleRef */
            [self pushFollow:FOLLOW_chunk_in_ifstat407];
            [self chunk];

            [self popFollow];


             

            do {
                NSInteger alt9=2;
                NSInteger LA9_0 = [input LA:1];
                if ( (LA9_0==ELSEIF) ) {
                    alt9=1;
                }


                switch (alt9) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:376:6: ^(eif= 'elseif' ec= conditional chunk ) // alt
                        {


                        eif=(CommonTree *)[self match:input TokenType:ELSEIF Follow:FOLLOW_ELSEIF_in_ifstat417]; 
                         



                        				[endRefs addInteger:[self address]+1];
                        				[self emit1:eif opcode:Bytecode.INSTR_BR arg:-1]; // br end
                        				// update previous branch instruction
                        				[self write:prevBranchOperand value:(short)[self address]];
                        				prevBranchOperand = -1;
                        				

                         
                            [self match:input TokenType:DOWN Follow:nil]; 

                            /* ruleRef */
                            [self pushFollow:FOLLOW_conditional_in_ifstat431];
                            ec = [self conditional];

                            [self popFollow];


                             


                            		       	prevBranchOperand = [self address]+1;
                            		       	// write placeholder as branch target
                            		       	[self emit1:(ec!=nil?((CommonTree *)ec.start):nil) opcode:Bytecode.INSTR_BRF arg:-1];
                            				

                             
                            /* ruleRef */
                            [self pushFollow:FOLLOW_chunk_in_ifstat443];
                            [self chunk];

                            [self popFollow];


                             
                            [self match:input TokenType:UP Follow:nil]; 

                         
                        }
                        break;

                    default :
                        goto loop9;
                }
            } while (YES);
            loop9: ;

             
            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:393:4: ( ^(el= 'else' chunk ) )? // block
            NSInteger alt10=2;
            NSInteger LA10_0 = [input LA:1];

            if ( (LA10_0==ELSE) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:393:6: ^(el= 'else' chunk ) // alt
                    {


                    el=(CommonTree *)[self match:input TokenType:ELSE Follow:FOLLOW_ELSE_in_ifstat466]; 
                    [endRefs addInteger:[self address]+1];
                    [self emit1:el opcode:Bytecode.INSTR_BR arg:-1]; // br end
                    // update previous branch instruction
                    [self write:prevBranchOperand value:(short)[self address]];
                    prevBranchOperand = -1;
                    if ( [input LA:1] == DOWN ) {
                        [self match:input TokenType:DOWN Follow:nil]; 

                        /* ruleRef */
                        [self pushFollow:FOLLOW_chunk_in_ifstat480];
                        [self chunk];

                        [self popFollow];


                         
                        [self match:input TokenType:UP Follow:nil]; 
                    }

                     
                    }
                    break;

            }

             
            [self match:input TokenType:UP Follow:nil]; 

         


        		if ( prevBranchOperand>=0 ) {
                    [self write:prevBranchOperand value:(short)[self address]];
        		}
                for (int i = 0; i < [endRefs count]; i++) {
                    [self write:[endRefs integerAtIndex:i] value:(short)[self address]];
                }
        		

         
        }

        /* token+rule list labels */



        	if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];


    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end ifstat */

/*
 * $ANTLR start conditional
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:415:1: conditional : ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr );
 */
- (CodeGenerator_conditional_return *) conditional
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_conditional_return * retval = [CodeGenerator_conditional_return newCodeGenerator_conditional_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:416:2: ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr ) //ruleblock
        NSInteger alt11=4;
        unichar charLA11 = [input LA:1];
        switch (charLA11) {
            case OR: ;
                {
                alt11=1;
                }
                break;
            case AND: ;
                {
                alt11=2;
                }
                break;
            case BANG: ;
                {
                alt11=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case MAP: ;
            case PROP: ;
            case PROP_IND: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
            case ZIP: ;
                {
                alt11=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:11 state:0 stream:input];
            nvae.c = charLA11;
            @throw nvae;

        }

        switch (alt11) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:416:4: ^( '||' conditional conditional ) // alt
                {


                [self match:input TokenType:OR Follow:FOLLOW_OR_in_conditional514]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional516];
                    [self conditional];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional518];
                    [self conditional];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit:Bytecode.INSTR_OR];

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:417:4: ^( '&&' conditional conditional ) // alt
                {


                [self match:input TokenType:AND Follow:FOLLOW_AND_in_conditional528]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional530];
                    [self conditional];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional532];
                    [self conditional];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit:Bytecode.INSTR_AND];

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:418:4: ^( '!' conditional ) // alt
                {


                [self match:input TokenType:BANG Follow:FOLLOW_BANG_in_conditional542]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional544];
                    [self conditional];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit:Bytecode.INSTR_NOT];

                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:419:4: expr // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_conditional556];
                [self expr];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end conditional */

/*
 * $ANTLR start exprOptions
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:422:1: exprOptions : ^( OPTIONS ( option )* ) ;
 */
- (void) exprOptions
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:422:13: ( ^( OPTIONS ( option )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:422:15: ^( OPTIONS ( option )* ) // alt
        {


        [self emit:Bytecode.INSTR_OPTIONS];

         

        [self match:input TokenType:OPTIONS Follow:FOLLOW_OPTIONS_in_exprOptions570]; 
         
        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 


            do {
                NSInteger alt12=2;
                NSInteger LA12_0 = [input LA:1];
                if ( (LA12_0==EQUALS) ) {
                    alt12=1;
                }


                switch (alt12) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:422:63: option // alt
                        {

                        /* ruleRef */
                        [self pushFollow:FOLLOW_option_in_exprOptions572];
                        [self option];

                        [self popFollow];


                         
                        }
                        break;

                    default :
                        goto loop12;
                }
            } while (YES);
            loop12: ;

             
            [self match:input TokenType:UP Follow:nil]; 
        }

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end exprOptions */

/*
 * $ANTLR start option
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:424:1: option : ^( '=' ID expr ) ;
 */
- (void) option
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonTree *ID11 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:424:8: ( ^( '=' ID expr ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:424:10: ^( '=' ID expr ) // alt
        {


        [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_option584]; 
         
            [self match:input TokenType:DOWN Follow:nil]; 

            ID11=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_option586]; 
             
            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_option588];
            [self expr];

            [self popFollow];


             
            [self match:input TokenType:UP Follow:nil]; 

         

        [self setOption:ID11];

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end option */

/*
 * $ANTLR start expr
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:426:1: expr : ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr );
 */
- (void) expr
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    NSInteger nt = 0, ne = 0;
    @try {
        /* ruleLabelDefs entry */
        CommonTree *ZIP12 = nil;
        CommonTree *MAP13 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:428:2: ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr ) //ruleblock
        NSInteger alt15=4;
        unichar charLA15 = [input LA:1];
        switch (charLA15) {
            case ZIP: ;
                {
                alt15=1;
                }
                break;
            case MAP: ;
                {
                alt15=2;
                }
                break;
            case PROP: ;
            case PROP_IND: ;
                {
                alt15=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
                {
                alt15=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:15 state:0 stream:input];
            nvae.c = charLA15;
            @throw nvae;

        }

        switch (alt15) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:428:4: ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) // alt
                {


                ZIP12=(CommonTree *)[self match:input TokenType:ZIP Follow:FOLLOW_ZIP_in_expr607]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 


                    [self match:input TokenType:ELEMENTS Follow:FOLLOW_ELEMENTS_in_expr610]; 
                     
                        [self match:input TokenType:DOWN Follow:nil]; 

                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:428:21: ( expr )+ // positiveClosureBlock
                        NSInteger cnt13 = 0;
                        do {
                            NSInteger alt13 = 2;
                            NSInteger LA13_0 = [input LA:1];
                            if ( (LA13_0==ID||LA13_0==STRING||(LA13_0 >= T_FALSE && LA13_0 <= T_TRUE)||LA13_0==EXEC_FUNC||(LA13_0 >= INCLUDE && LA13_0 <= INCLUDE_SUPER_REGION)||(LA13_0 >= LIST && LA13_0 <= MAP)||(LA13_0 >= PROP && LA13_0 <= PROP_IND)||LA13_0==SUBTEMPLATE||(LA13_0 >= TO_STR && LA13_0 <= ZIP)) ) {
                                alt13=1;
                            }


                            switch (alt13) {
                                case 1 : ;
                                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:428:22: expr // alt
                                    {

                                    /* ruleRef */
                                    [self pushFollow:FOLLOW_expr_in_expr613];
                                    [self expr];

                                    [self popFollow];


                                     

                                    ne++;

                                     
                                    }
                                    break;

                                default :
                                    if ( cnt13 >= 1 )
                                        goto loop13;
                                    EarlyExitException *eee =
                                        [EarlyExitException newException:input decisionNumber:13];
                                    @throw eee;
                            }
                            cnt13++;
                        } while (YES);
                        loop13: ;

                         
                        [self match:input TokenType:UP Follow:nil]; 

                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_mapTemplateRef_in_expr620];
                    [self mapTemplateRef:ne ];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit1:ZIP12 opcode:Bytecode.INSTR_ZIP_MAP arg:ne];

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:430:4: ^( MAP expr ( mapTemplateRef[1] )+ ) // alt
                {


                MAP13=(CommonTree *)[self match:input TokenType:MAP Follow:FOLLOW_MAP_in_expr632]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_expr634];
                    [self expr];

                    [self popFollow];


                     
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:430:15: ( mapTemplateRef[1] )+ // positiveClosureBlock
                    NSInteger cnt14 = 0;
                    do {
                        NSInteger alt14 = 2;
                        NSInteger LA14_0 = [input LA:1];
                        if ( ((LA14_0 >= INCLUDE && LA14_0 <= INCLUDE_IND)||LA14_0==SUBTEMPLATE) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                            case 1 : ;
                                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:430:16: mapTemplateRef[1] // alt
                                {

                                /* ruleRef */
                                [self pushFollow:FOLLOW_mapTemplateRef_in_expr637];
                                [self mapTemplateRef:1 ];

                                [self popFollow];


                                 

                                nt++;

                                 
                                }
                                break;

                            default :
                                if ( cnt14 >= 1 )
                                    goto loop14;
                                EarlyExitException *eee =
                                    [EarlyExitException newException:input decisionNumber:14];
                                @throw eee;
                        }
                        cnt14++;
                    } while (YES);
                    loop14: ;

                     
                    [self match:input TokenType:UP Follow:nil]; 

                 


                		if ( nt>1 )
                            [self emit1:MAP13 opcode:Bytecode.INSTR_ROT_MAP arg:nt];
                		else
                            [self emit:MAP13 opcode:Bytecode.INSTR_MAP];
                		

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:437:4: prop // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_prop_in_expr652];
                [self prop];

                [self popFollow];


                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:438:4: includeExpr // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_includeExpr_in_expr657];
                [self includeExpr];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end expr */

/*
 * $ANTLR start prop
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:441:1: prop : ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) );
 */
- (void) prop
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonTree *PROP14 = nil;
        CommonTree *ID15 = nil;
        CommonTree *PROP_IND16 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:441:5: ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) ) //ruleblock
        NSInteger alt16=2;
        NSInteger LA16_0 = [input LA:1];

        if ( (LA16_0==PROP) ) {
            alt16=1;
        }
        else if ( (LA16_0==PROP_IND) ) {
            alt16=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:16 state:0 stream:input];
            nvae.c = LA16_0;
            @throw nvae;

        }
        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:441:7: ^( PROP expr ID ) // alt
                {


                PROP14=(CommonTree *)[self match:input TokenType:PROP Follow:FOLLOW_PROP_in_prop667]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop669];
                    [self expr];

                    [self popFollow];


                     
                    ID15=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_prop671]; 
                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit1:PROP14 opcode:Bytecode.INSTR_LOAD_PROP s:(ID15!=nil?ID15.text:nil)];

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:442:4: ^( PROP_IND expr expr ) // alt
                {


                PROP_IND16=(CommonTree *)[self match:input TokenType:PROP_IND Follow:FOLLOW_PROP_IND_in_prop685]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop687];
                    [self expr];

                    [self popFollow];


                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop689];
                    [self expr];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit:PROP_IND16 opcode:Bytecode.INSTR_LOAD_PROP_IND];

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end prop */

/*
 * $ANTLR start mapTemplateRef
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:445:1: mapTemplateRef[NSInteger num_exprs] : ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) );
 */
- (CodeGenerator_mapTemplateRef_return *) mapTemplateRef:(NSInteger)num_exprs 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_mapTemplateRef_return * retval = [CodeGenerator_mapTemplateRef_return newCodeGenerator_mapTemplateRef_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *INCLUDE17 = nil;
        CommonTree *ID19 = nil;
        CommonTree *INCLUDE_IND21 = nil;

        CodeGenerator_args_return * args18 = nil ;

        CodeGenerator_subtemplate_return * subtemplate20 = nil ;

        CodeGenerator_args_return * args22 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:446:2: ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) ) //ruleblock
        NSInteger alt17=3;
        unichar charLA17 = [input LA:1];
        switch (charLA17) {
            case INCLUDE: ;
                {
                alt17=1;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt17=2;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt17=3;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:17 state:0 stream:input];
            nvae.c = charLA17;
            @throw nvae;

        }

        switch (alt17) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:446:4: ^( INCLUDE ID args ) // alt
                {


                INCLUDE17=(CommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_mapTemplateRef709]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID19=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_mapTemplateRef711]; 
                     

                    for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE17 opcode:Bytecode.INSTR_NULL];

                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef721];
                    args18 = [self args];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 


                if ( (args18!=nil?args18.passThru:NO ) )
                    [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU
                              s:(ID19!=nil?ID19.text:nil)];
                if ( ((args18!=nil) ? args18.namedArgs:NO ) )
                    [self emit1:INCLUDE17 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID19!=nil?ID19.text:nil)];
                else
                    [self emit2:INCLUDE17 opcode:Bytecode.INSTR_NEW s:(ID19!=nil?ID19.text:nil) arg2:(
                (args18!=nil?args18.n:0)+num_exprs)];
                		

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:457:4: subtemplate // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_mapTemplateRef734];
                subtemplate20 = [self subtemplate];

                [self popFollow];


                 


                		if ( (subtemplate20!=nil?subtemplate20.nargs:0 ) != num_exprs ) {
                            [errMgr compileTimeError:ANON_ARGUMENT_MISMATCH
                                       templateToken:templateToken
                                                   t:(subtemplate20!=nil?((CommonTree *)subtemplate20.start):nil).token
                                                 arg:[ACNumber numberWithInteger:(subtemplate20!=nil?subtemplate20.nargs:0 )]
                                                arg2:[ACNumber numberWithInteger:num_exprs]];
                		}
                		for (NSInteger i=1; i<=num_exprs; i++) [self emit:(subtemplate20!=nil?((CommonTree *)subtemplate20.start):nil) opcode:Bytecode.INSTR_NULL];
                        [self emit2:(subtemplate20!=nil?((CommonTree *)subtemplate20.start):nil)
                             opcode:Bytecode.INSTR_NEW
                                  s:(subtemplate20!=nil?subtemplate20.name:nil )
                               arg2:num_exprs];
                		

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:473:4: ^( INCLUDE_IND expr args ) // alt
                {


                INCLUDE_IND21=(CommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_mapTemplateRef746]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_mapTemplateRef748];
                    [self expr];

                    [self popFollow];


                     


                    			[self emit:INCLUDE_IND21 opcode:Bytecode.INSTR_TOSTR];
                    			for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE_IND21 opcode:Bytecode.INSTR_NULL];
                    			

                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef758];
                    args22 = [self args];

                    [self popFollow];


                     


                    			[self emit1:INCLUDE_IND21 opcode:Bytecode.INSTR_NEW_IND arg:( (args22!=nil?args22.n:0 ) +num_exprs)];
                    			

                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end mapTemplateRef */

/*
 * $ANTLR start includeExpr
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:485:1: includeExpr : ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary );
 */
- (CodeGenerator_includeExpr_return *) includeExpr
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_includeExpr_return * retval = [CodeGenerator_includeExpr_return newCodeGenerator_includeExpr_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *ID23 = nil;
        CommonTree *ID25 = nil;
        CommonTree *INCLUDE26 = nil;
        CommonTree *ID28 = nil;
        CommonTree *INCLUDE_SUPER29 = nil;
        CommonTree *ID30 = nil;
        CommonTree *INCLUDE_REGION31 = nil;
        CommonTree *ID32 = nil;
        CommonTree *INCLUDE_SUPER_REGION33 = nil;

        CodeGenerator_args_return * args24 = nil ;

        CodeGenerator_args_return * args27 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:486:2: ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary ) //ruleblock
        NSInteger alt19=6;
        unichar charLA19 = [input LA:1];
        switch (charLA19) {
            case EXEC_FUNC: ;
                {
                alt19=1;
                }
                break;
            case INCLUDE: ;
                {
                alt19=2;
                }
                break;
            case INCLUDE_SUPER: ;
                {
                alt19=3;
                }
                break;
            case INCLUDE_REGION: ;
                {
                alt19=4;
                }
                break;
            case INCLUDE_SUPER_REGION: ;
                {
                alt19=5;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case INCLUDE_IND: ;
            case LIST: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
                {
                alt19=6;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:19 state:0 stream:input];
            nvae.c = charLA19;
            @throw nvae;

        }

        switch (alt19) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:486:4: ^( EXEC_FUNC ID ( expr )? ) // alt
                {


                [self match:input TokenType:EXEC_FUNC Follow:FOLLOW_EXEC_FUNC_in_includeExpr780]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID23=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr782]; 
                     
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:486:19: ( expr )? // block
                    NSInteger alt18=2;
                    NSInteger LA18_0 = [input LA:1];

                    if ( (LA18_0==ID||LA18_0==STRING||(LA18_0 >= T_FALSE && LA18_0 <= T_TRUE)||LA18_0==EXEC_FUNC||(LA18_0 >= INCLUDE && LA18_0 <= INCLUDE_SUPER_REGION)||(LA18_0 >= LIST && LA18_0 <= MAP)||(LA18_0 >= PROP && LA18_0 <= PROP_IND)||LA18_0==SUBTEMPLATE||(LA18_0 >= TO_STR && LA18_0 <= ZIP)) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:486:19: expr // alt
                            {

                            /* ruleRef */
                            [self pushFollow:FOLLOW_expr_in_includeExpr784];
                            [self expr];

                            [self popFollow];


                             
                            }
                            break;

                    }

                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self func:ID23];

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:487:4: ^( INCLUDE ID args ) // alt
                {


                INCLUDE26=(CommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_includeExpr795]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID25=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr797]; 
                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr799];
                    args24 = [self args];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 


                    if ( (args24!=nil?args24.passThru:NO) )
                        [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU s:(ID25!=nil?ID25.text:nil)];
                    if ( (args24!=nil?args24.namedArgs:NO) )
                        [self emit1:INCLUDE26 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID25!=nil?ID25.text:nil)];
                    else [self emit2:INCLUDE26 opcode:Bytecode.INSTR_NEW s:(ID25!=nil?ID25.text:nil) arg2:(args24!=nil?args24.n:0 )];
                		

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:493:4: ^( INCLUDE_SUPER ID args ) // alt
                {


                INCLUDE_SUPER29=(CommonTree *)[self match:input TokenType:INCLUDE_SUPER Follow:FOLLOW_INCLUDE_SUPER_in_includeExpr810]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID28=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr812]; 
                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr814];
                    args27 = [self args];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 


                    if ( (args27!=nil?args27.passThru:NO ) )
                        [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU s:(ID28!=nil?ID28.text:nil)];
                    if ( (args27!=nil?args27.namedArgs:NO ) )
                        [self emit1:INCLUDE_SUPER29 opcode:Bytecode.INSTR_SUPER_NEW_BOX_ARGS s:(ID28!=nil?ID28.text:nil)];
                    else
                        [self emit2:INCLUDE_SUPER29 opcode:Bytecode.INSTR_SUPER_NEW s:(ID28!=nil?ID28.text:nil) arg2:(args27!=nil?args27.n:0 )];
                		

                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:499:4: ^( INCLUDE_REGION ID ) // alt
                {


                INCLUDE_REGION31=(CommonTree *)[self match:input TokenType:INCLUDE_REGION Follow:FOLLOW_INCLUDE_REGION_in_includeExpr825]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID30=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr827]; 
                     
                    [self match:input TokenType:UP Follow:nil]; 

                 


                CompiledST *impl = [Compiler defineBlankRegion:outermostImpl token:ID30.token];
                //impl.dump();
                [self emit2:INCLUDE_REGION31 opcode:Bytecode.INSTR_NEW s:impl.name arg2:0];
                

                 
                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:505:4: ^( INCLUDE_SUPER_REGION ID ) // alt
                {


                INCLUDE_SUPER_REGION33=(CommonTree *)[self match:input TokenType:INCLUDE_SUPER_REGION Follow:FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr837]; 
                 
                [self match:input TokenType:DOWN Follow:nil]; 

                ID32=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr839]; 
                 
                [self match:input TokenType:UP Follow:nil]; 

                 


                 NSString *mangled = [STGroup getMangledRegionName:outermostImpl.name name:(ID32!=nil?ID32.text:nil)];
                [self emit2:INCLUDE_SUPER_REGION33 opcode:Bytecode.INSTR_SUPER_NEW s:mangled arg2:0];
                									

                 
                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:510:4: primary // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_primary_in_includeExpr847];
                [self primary];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end includeExpr */

/*
 * $ANTLR start primary
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:513:1: primary : ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) );
 */
- (CodeGenerator_primary_return *) primary
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_primary_return * retval = [CodeGenerator_primary_return newCodeGenerator_primary_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *ID34 = nil;
        CommonTree *STRING35 = nil;
        CommonTree *T_TRUE36 = nil;
        CommonTree *T_FALSE37 = nil;
        CommonTree *INCLUDE_IND39 = nil;
        CommonTree *TO_STR41 = nil;

        CodeGenerator_subtemplate_return * subtemplate38 = nil ;

        CodeGenerator_args_return * args40 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:514:2: ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) ) //ruleblock
        NSInteger alt20=8;
        unichar charLA20 = [input LA:1];
        switch (charLA20) {
            case ID: ;
                {
                alt20=1;
                }
                break;
            case STRING: ;
                {
                alt20=2;
                }
                break;
            case T_TRUE: ;
                {
                alt20=3;
                }
                break;
            case T_FALSE: ;
                {
                alt20=4;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt20=5;
                }
                break;
            case LIST: ;
                {
                alt20=6;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt20=7;
                }
                break;
            case TO_STR: ;
                {
                alt20=8;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:20 state:0 stream:input];
            nvae.c = charLA20;
            @throw nvae;

        }

        switch (alt20) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:514:4: ID // alt
                {

                ID34=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_primary858]; 
                 

                [self refAttr:ID34];

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:515:4: STRING // alt
                {

                STRING35=(CommonTree *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_primary868]; 
                 

                [self emit1:STRING35 opcode:Bytecode.INSTR_LOAD_STR s:[Misc strip:(STRING35!=nil?STRING35.text:nil) n:1]];

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:516:4: T_TRUE // alt
                {

                T_TRUE36=(CommonTree *)[self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_primary878]; 
                 

                [self emit:T_TRUE36 opcode:Bytecode.INSTR_TRUE];

                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:517:4: T_FALSE // alt
                {

                T_FALSE37=(CommonTree *)[self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_primary887]; 
                 

                [self emit:T_FALSE37 opcode:Bytecode.INSTR_FALSE];

                 
                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:518:4: subtemplate // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_primary896];
                subtemplate38 = [self subtemplate];

                [self popFollow];


                 

                [self emit2:((CommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:
                (subtemplate38!=nil?subtemplate38.name:nil )
                 arg2:0];

                 
                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:520:4: list // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_list_in_primary923];
                [self list];

                [self popFollow];


                 
                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:521:4: ^( INCLUDE_IND expr args ) // alt
                {


                INCLUDE_IND39=(CommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_primary930]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary935];
                    [self expr];

                    [self popFollow];


                     

                    [self emit:INCLUDE_IND39 opcode:Bytecode.INSTR_TOSTR];

                     
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_primary949];
                    args40 = [self args];

                    [self popFollow];


                     

                    [self emit1:INCLUDE_IND39 opcode:Bytecode.INSTR_NEW_IND arg:
                    (args40!=nil?args40.n:0 )];

                     
                    [self match:input TokenType:UP Follow:nil]; 

                 
                }
                break;
            case 8 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:525:4: ^( TO_STR expr ) // alt
                {


                TO_STR41=(CommonTree *)[self match:input TokenType:TO_STR Follow:FOLLOW_TO_STR_in_primary969]; 
                 
                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary971];
                    [self expr];

                    [self popFollow];


                     
                    [self match:input TokenType:UP Follow:nil]; 

                 

                [self emit:TO_STR41 opcode:Bytecode.INSTR_TOSTR];

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end primary */

/*
 * $ANTLR start arg
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:528:1: arg : expr ;
 */
- (void) arg
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:528:5: ( expr ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:528:7: expr // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_expr_in_arg984];
        [self expr];

        [self popFollow];


         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end arg */

/*
 * $ANTLR start args
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:530:1: args returns [NSInteger n=0, BOOL namedArgs=NO, BOOL passThru] : ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |);
 */
- (CodeGenerator_args_return *) args
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_args_return * retval = [CodeGenerator_args_return newCodeGenerator_args_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *eq = nil;
        CommonTree *ID42 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:531:2: ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |) //ruleblock
        NSInteger alt24=4;
        unichar charLA24 = [input LA:1];
        switch (charLA24) {
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case MAP: ;
            case PROP: ;
            case PROP_IND: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
            case ZIP: ;
                {
                alt24=1;
                }
                break;
            case EQUALS: ;
                {
                alt24=2;
                }
                break;
            case ELLIPSIS: ;
                {
                alt24=3;
                }
                break;
            case UP: ;
                {
                alt24=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:24 state:0 stream:input];
            nvae.c = charLA24;
            @throw nvae;

        }

        switch (alt24) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:531:4: ( arg )+ // alt
                {

                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:531:4: ( arg )+ // positiveClosureBlock
                NSInteger cnt21 = 0;
                do {
                    NSInteger alt21 = 2;
                    NSInteger LA21_0 = [input LA:1];
                    if ( (LA21_0==ID||LA21_0==STRING||(LA21_0 >= T_FALSE && LA21_0 <= T_TRUE)||LA21_0==EXEC_FUNC||(LA21_0 >= INCLUDE && LA21_0 <= INCLUDE_SUPER_REGION)||(LA21_0 >= LIST && LA21_0 <= MAP)||(LA21_0 >= PROP && LA21_0 <= PROP_IND)||LA21_0==SUBTEMPLATE||(LA21_0 >= TO_STR && LA21_0 <= ZIP)) ) {
                        alt21=1;
                    }


                    switch (alt21) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:531:6: arg // alt
                            {

                            /* ruleRef */
                            [self pushFollow:FOLLOW_arg_in_args1000];
                            [self arg];

                            [self popFollow];


                             

                            retval.n  /* added to returnAttributeRef */
                            ++;

                             
                            }
                            break;

                        default :
                            if ( cnt21 >= 1 )
                                goto loop21;
                            EarlyExitException *eee =
                                [EarlyExitException newException:input decisionNumber:21];
                            @throw eee;
                    }
                    cnt21++;
                } while (YES);
                loop21: ;

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:532:4: ( ^(eq= '=' ID expr ) )+ ( '...' )? // alt
                {


                [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS]; retval.namedArgs =YES; /* added to returnSetAttributeRef */


                 
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:533:3: ( ^(eq= '=' ID expr ) )+ // positiveClosureBlock
                NSInteger cnt22 = 0;
                do {
                    NSInteger alt22 = 2;
                    NSInteger LA22_0 = [input LA:1];
                    if ( (LA22_0==EQUALS) ) {
                        alt22=1;
                    }


                    switch (alt22) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:533:5: ^(eq= '=' ID expr ) // alt
                            {


                            eq=(CommonTree *)[self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_args1019]; 
                             
                                [self match:input TokenType:DOWN Follow:nil]; 

                                ID42=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_args1021]; 
                                 
                                /* ruleRef */
                                [self pushFollow:FOLLOW_expr_in_args1023];
                                [self expr];

                                [self popFollow];


                                 
                                [self match:input TokenType:UP Follow:nil]; 

                             

                            retval.n  /* added to returnAttributeRef */
                            ++; [self emit1:eq opcode:Bytecode.INSTR_STORE_ARG arg:[self defineString:(ID42!=nil?ID42.text:nil)]];

                             
                            }
                            break;

                        default :
                            if ( cnt22 >= 1 )
                                goto loop22;
                            EarlyExitException *eee =
                                [EarlyExitException newException:input decisionNumber:22];
                            @throw eee;
                    }
                    cnt22++;
                } while (YES);
                loop22: ;

                 
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:536:3: ( '...' )? // block
                NSInteger alt23=2;
                NSInteger LA23_0 = [input LA:1];

                if ( (LA23_0==ELLIPSIS) ) {
                    alt23=1;
                }
                switch (alt23) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:536:5: '...' // alt
                        {

                        [self match:input TokenType:ELLIPSIS Follow:FOLLOW_ELLIPSIS_in_args1040]; 
                         

                        retval.passThru =YES; /* added to returnSetAttributeRef */


                         
                        }
                        break;

                }

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:537:9: '...' // alt
                {

                [self match:input TokenType:ELLIPSIS Follow:FOLLOW_ELLIPSIS_in_args1055]; 
                 

                retval.passThru =YES; /* added to returnSetAttributeRef */
                 [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS]; retval.namedArgs =YES; /* added to returnSetAttributeRef */


                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:539:3:  // alt
                {
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end args */

/*
 * $ANTLR start list
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:541:1: list : ^( LIST ( listElement )* ) ;
 */
- (void) list
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */


        CodeGenerator_listElement_return * listElement43 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:541:5: ( ^( LIST ( listElement )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:541:7: ^( LIST ( listElement )* ) // alt
        {


        [self emit:Bytecode.INSTR_LIST];

         

        [self match:input TokenType:LIST Follow:FOLLOW_LIST_in_list1075]; 
         
        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 


            do {
                NSInteger alt25=2;
                NSInteger LA25_0 = [input LA:1];
                if ( (LA25_0==ID||LA25_0==STRING||(LA25_0 >= T_FALSE && LA25_0 <= T_TRUE)||LA25_0==EXEC_FUNC||(LA25_0 >= INCLUDE && LA25_0 <= INCLUDE_SUPER_REGION)||(LA25_0 >= LIST && LA25_0 <= MAP)||(LA25_0 >= PROP && LA25_0 <= PROP_IND)||(LA25_0 >= SUBTEMPLATE && LA25_0 <= ZIP)) ) {
                    alt25=1;
                }


                switch (alt25) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:542:11: listElement // alt
                        {

                        /* ruleRef */
                        [self pushFollow:FOLLOW_listElement_in_list1078];
                        listElement43 = [self listElement];

                        [self popFollow];


                         

                        [self emit:(listElement43!=nil?((CommonTree *)listElement43.start):nil) opcode:Bytecode.INSTR_ADD];

                         
                        }
                        break;

                    default :
                        goto loop25;
                }
            } while (YES);
            loop25: ;

             
            [self match:input TokenType:UP Follow:nil]; 
        }

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end list */

/*
 * $ANTLR start listElement
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:545:1: listElement : ( expr | TNULL );
 */
- (CodeGenerator_listElement_return *) listElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_listElement_return * retval = [CodeGenerator_listElement_return newCodeGenerator_listElement_return];
    [retval setStart:[input LT:1]];


    @try {
        /* ruleLabelDefs entry */
        CommonTree *TNULL44 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:545:13: ( expr | TNULL ) //ruleblock
        NSInteger alt26=2;
        NSInteger LA26_0 = [input LA:1];

        if ( (LA26_0==ID||LA26_0==STRING||(LA26_0 >= T_FALSE && LA26_0 <= T_TRUE)||LA26_0==EXEC_FUNC||(LA26_0 >= INCLUDE && LA26_0 <= INCLUDE_SUPER_REGION)||(LA26_0 >= LIST && LA26_0 <= MAP)||(LA26_0 >= PROP && LA26_0 <= PROP_IND)||LA26_0==SUBTEMPLATE||(LA26_0 >= TO_STR && LA26_0 <= ZIP)) ) {
            alt26=1;
        }
        else if ( (LA26_0==TNULL) ) {
            alt26=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:26 state:0 stream:input];
            nvae.c = LA26_0;
            @throw nvae;

        }
        switch (alt26) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:545:15: expr // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_listElement1094];
                [self expr];

                [self popFollow];


                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/CodeGenerator.g:545:22: TNULL // alt
                {
                TNULL44=(CommonTree *)[self match:input TokenType:TNULL Follow:FOLLOW_TNULL_in_listElement1098]; 
                [self emit:TNULL44 opcode:Bytecode.INSTR_NULL];
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end listElement */
/* ObjC end rules */

@end /* end of CodeGenerator implementation line 692 */
