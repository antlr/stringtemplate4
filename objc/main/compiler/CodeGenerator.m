/** \file
 *  This OBJC source file was generated by $ANTLR version ${project.version} ${buildNumber}
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g
 *     -                            On : 2011-05-08 21:31:56
 *     -           for the tree parser : CodeGeneratorTreeParser
 *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// $ANTLR ${project.version} ${buildNumber} /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g 2011-05-08 21:31:56


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import <ANTLR/ANTLR.h>
#import "STErrorListener.h"
#import "CodeGenerator.h"
/* ----------------------------------------- */


#pragma mark Tokens
#ifdef EOF
#undef EOF
#endif
#define EOF -1
#define ID 4
#define WS 5
#define STRING 6
#define ANONYMOUS_TEMPLATE 7
#define COMMENT 8
#define LINE_COMMENT 9
#define BIGSTRING 10
#define BIGSTRING_NO_NL 11
#define T_FALSE 12
#define T_TRUE 13
#define IF 14
#define ELSE 15
#define ELSEIF 16
#define ENDIF 17
#define SUPER 18
#define SEMI 19
#define BANG 20
#define ELLIPSIS 21
#define EQUALS 22
#define COLON 23
#define LPAREN 24
#define RPAREN 25
#define LBRACK 26
#define RBRACK 27
#define COMMA 28
#define DOT 29
#define LCURLY 30
//#define RCURLY 31
#define TEXT 32
//#define LDELIM 33
#define RDELIM 34
#define PIPE 35
#define OR 36
#define AND 37
#define INDENT 38
#define NEWLINE 39
#define AT 40
#define END 41
#define ARGS 42
#define ELEMENTS 43
#define EXEC_FUNC 44
#define EXPR 45
#define INCLUDE 46
#define INCLUDE_IND 47
#define INCLUDE_REGION 48
#define INCLUDE_SUPER 49
#define INCLUDE_SUPER_REGION 50
#define INDENTED_EXPR 51
#define LIST 52
#define MAP 53
#define OPTIONS 54
#define PROP 55
#define PROP_IND 56
#define REGION 57
#define SUBTEMPLATE 58
#define TNULL 59
#define TO_STR 60
#define ZIP 61
/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_template_in_templateAndEOF74;
static const unsigned long long FOLLOW_template_in_templateAndEOF74_data[] = { 0x0000000000000000LL};
static ANTLRBitSet *FOLLOW_EOF_in_templateAndEOF77;
static const unsigned long long FOLLOW_EOF_in_templateAndEOF77_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_chunk_in_template101;
static const unsigned long long FOLLOW_chunk_in_template101_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_element_in_chunk116;
static const unsigned long long FOLLOW_element_in_chunk116_data[] = { 0x0208208100004002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element129;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element129_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element131;
static const unsigned long long FOLLOW_INDENT_in_element131_data[] = { 0x0200000000004000LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element133;
static const unsigned long long FOLLOW_compoundElement_in_element133_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_compoundElement_in_element141;
static const unsigned long long FOLLOW_compoundElement_in_element141_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INDENTED_EXPR_in_element151;
static const unsigned long long FOLLOW_INDENTED_EXPR_in_element151_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_INDENT_in_element153;
static const unsigned long long FOLLOW_INDENT_in_element153_data[] = { 0x0000208100000000LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element157;
static const unsigned long long FOLLOW_singleElement_in_element157_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_singleElement_in_element165;
static const unsigned long long FOLLOW_singleElement_in_element165_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_exprElement_in_singleElement179;
static const unsigned long long FOLLOW_exprElement_in_singleElement179_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TEXT_in_singleElement184;
static const unsigned long long FOLLOW_TEXT_in_singleElement184_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_NEWLINE_in_singleElement193;
static const unsigned long long FOLLOW_NEWLINE_in_singleElement193_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ifstat_in_compoundElement207;
static const unsigned long long FOLLOW_ifstat_in_compoundElement207_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_region_in_compoundElement213;
static const unsigned long long FOLLOW_region_in_compoundElement213_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_EXPR_in_exprElement232;
static const unsigned long long FOLLOW_EXPR_in_exprElement232_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_exprElement234;
static const unsigned long long FOLLOW_expr_in_exprElement234_data[] = { 0x0040000000000008LL};
static ANTLRBitSet *FOLLOW_exprOptions_in_exprElement237;
static const unsigned long long FOLLOW_exprOptions_in_exprElement237_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_REGION_in_region275;
static const unsigned long long FOLLOW_REGION_in_region275_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_region277;
static const unsigned long long FOLLOW_ID_in_region277_data[] = { 0x0208208100004000LL};
static ANTLRBitSet *FOLLOW_template_in_region287;
static const unsigned long long FOLLOW_template_in_region287_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_SUBTEMPLATE_in_subtemplate320;
static const unsigned long long FOLLOW_SUBTEMPLATE_in_subtemplate320_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ARGS_in_subtemplate327;
static const unsigned long long FOLLOW_ARGS_in_subtemplate327_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_subtemplate330;
static const unsigned long long FOLLOW_ID_in_subtemplate330_data[] = { 0x0000000000000018LL};
static ANTLRBitSet *FOLLOW_template_in_subtemplate347;
static const unsigned long long FOLLOW_template_in_subtemplate347_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_IF_in_ifstat384;
static const unsigned long long FOLLOW_IF_in_ifstat384_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat386;
static const unsigned long long FOLLOW_conditional_in_ifstat386_data[] = { 0x020820810001C008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat396;
static const unsigned long long FOLLOW_chunk_in_ifstat396_data[] = { 0x0000000000018008LL};
static ANTLRBitSet *FOLLOW_ELSEIF_in_ifstat406;
static const unsigned long long FOLLOW_ELSEIF_in_ifstat406_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_ifstat420;
static const unsigned long long FOLLOW_conditional_in_ifstat420_data[] = { 0x0208208100004008LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat432;
static const unsigned long long FOLLOW_chunk_in_ifstat432_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELSE_in_ifstat455;
static const unsigned long long FOLLOW_ELSE_in_ifstat455_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_chunk_in_ifstat469;
static const unsigned long long FOLLOW_chunk_in_ifstat469_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_OR_in_conditional503;
static const unsigned long long FOLLOW_OR_in_conditional503_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional505;
static const unsigned long long FOLLOW_conditional_in_conditional505_data[] = { 0x35B7D03000103050LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional507;
static const unsigned long long FOLLOW_conditional_in_conditional507_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_AND_in_conditional517;
static const unsigned long long FOLLOW_AND_in_conditional517_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional519;
static const unsigned long long FOLLOW_conditional_in_conditional519_data[] = { 0x35B7D03000103050LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional521;
static const unsigned long long FOLLOW_conditional_in_conditional521_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_BANG_in_conditional531;
static const unsigned long long FOLLOW_BANG_in_conditional531_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_conditional_in_conditional533;
static const unsigned long long FOLLOW_conditional_in_conditional533_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_conditional545;
static const unsigned long long FOLLOW_expr_in_conditional545_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_OPTIONS_in_exprOptions559;
static const unsigned long long FOLLOW_OPTIONS_in_exprOptions559_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_option_in_exprOptions561;
static const unsigned long long FOLLOW_option_in_exprOptions561_data[] = { 0x0000000000400008LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_option573;
static const unsigned long long FOLLOW_EQUALS_in_option573_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_option575;
static const unsigned long long FOLLOW_ID_in_option575_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_option577;
static const unsigned long long FOLLOW_expr_in_option577_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ZIP_in_expr596;
static const unsigned long long FOLLOW_ZIP_in_expr596_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ELEMENTS_in_expr599;
static const unsigned long long FOLLOW_ELEMENTS_in_expr599_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr602;
static const unsigned long long FOLLOW_expr_in_expr602_data[] = { 0x35B7D00000003058LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr609;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr609_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_MAP_in_expr621;
static const unsigned long long FOLLOW_MAP_in_expr621_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_expr623;
static const unsigned long long FOLLOW_expr_in_expr623_data[] = { 0x0400C00000000000LL};
static ANTLRBitSet *FOLLOW_mapTemplateRef_in_expr626;
static const unsigned long long FOLLOW_mapTemplateRef_in_expr626_data[] = { 0x0400C00000000008LL};
static ANTLRBitSet *FOLLOW_prop_in_expr641;
static const unsigned long long FOLLOW_prop_in_expr641_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_includeExpr_in_expr646;
static const unsigned long long FOLLOW_includeExpr_in_expr646_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_PROP_in_prop656;
static const unsigned long long FOLLOW_PROP_in_prop656_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop658;
static const unsigned long long FOLLOW_expr_in_prop658_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_prop660;
static const unsigned long long FOLLOW_ID_in_prop660_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_PROP_IND_in_prop674;
static const unsigned long long FOLLOW_PROP_IND_in_prop674_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_prop676;
static const unsigned long long FOLLOW_expr_in_prop676_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_prop678;
static const unsigned long long FOLLOW_expr_in_prop678_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_mapTemplateRef698;
static const unsigned long long FOLLOW_INCLUDE_in_mapTemplateRef698_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_mapTemplateRef700;
static const unsigned long long FOLLOW_ID_in_mapTemplateRef700_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef710;
static const unsigned long long FOLLOW_args_in_mapTemplateRef710_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_mapTemplateRef723;
static const unsigned long long FOLLOW_subtemplate_in_mapTemplateRef723_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_mapTemplateRef735;
static const unsigned long long FOLLOW_INCLUDE_IND_in_mapTemplateRef735_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_mapTemplateRef737;
static const unsigned long long FOLLOW_expr_in_mapTemplateRef737_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_mapTemplateRef747;
static const unsigned long long FOLLOW_args_in_mapTemplateRef747_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_EXEC_FUNC_in_includeExpr769;
static const unsigned long long FOLLOW_EXEC_FUNC_in_includeExpr769_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr771;
static const unsigned long long FOLLOW_ID_in_includeExpr771_data[] = { 0x35B7D00000003058LL};
static ANTLRBitSet *FOLLOW_expr_in_includeExpr773;
static const unsigned long long FOLLOW_expr_in_includeExpr773_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_in_includeExpr784;
static const unsigned long long FOLLOW_INCLUDE_in_includeExpr784_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr786;
static const unsigned long long FOLLOW_ID_in_includeExpr786_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr788;
static const unsigned long long FOLLOW_args_in_includeExpr788_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_in_includeExpr799;
static const unsigned long long FOLLOW_INCLUDE_SUPER_in_includeExpr799_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr801;
static const unsigned long long FOLLOW_ID_in_includeExpr801_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_includeExpr803;
static const unsigned long long FOLLOW_args_in_includeExpr803_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_REGION_in_includeExpr814;
static const unsigned long long FOLLOW_INCLUDE_REGION_in_includeExpr814_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr816;
static const unsigned long long FOLLOW_ID_in_includeExpr816_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr826;
static const unsigned long long FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr826_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_includeExpr828;
static const unsigned long long FOLLOW_ID_in_includeExpr828_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_primary_in_includeExpr836;
static const unsigned long long FOLLOW_primary_in_includeExpr836_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_primary847;
static const unsigned long long FOLLOW_ID_in_primary847_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_primary857;
static const unsigned long long FOLLOW_STRING_in_primary857_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_primary867;
static const unsigned long long FOLLOW_T_TRUE_in_primary867_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_primary876;
static const unsigned long long FOLLOW_T_FALSE_in_primary876_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_subtemplate_in_primary885;
static const unsigned long long FOLLOW_subtemplate_in_primary885_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_list_in_primary912;
static const unsigned long long FOLLOW_list_in_primary912_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_INCLUDE_IND_in_primary919;
static const unsigned long long FOLLOW_INCLUDE_IND_in_primary919_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary924;
static const unsigned long long FOLLOW_expr_in_primary924_data[] = { 0x35B7D00000603058LL};
static ANTLRBitSet *FOLLOW_args_in_primary938;
static const unsigned long long FOLLOW_args_in_primary938_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_TO_STR_in_primary958;
static const unsigned long long FOLLOW_TO_STR_in_primary958_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_expr_in_primary960;
static const unsigned long long FOLLOW_expr_in_primary960_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_expr_in_arg973;
static const unsigned long long FOLLOW_expr_in_arg973_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_arg_in_args989;
static const unsigned long long FOLLOW_arg_in_args989_data[] = { 0x35B7D00000003052LL};
static ANTLRBitSet *FOLLOW_EQUALS_in_args1008;
static const unsigned long long FOLLOW_EQUALS_in_args1008_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_ID_in_args1010;
static const unsigned long long FOLLOW_ID_in_args1010_data[] = { 0x35B7D00000003050LL};
static ANTLRBitSet *FOLLOW_expr_in_args1012;
static const unsigned long long FOLLOW_expr_in_args1012_data[] = { 0x0000000000000008LL};
static ANTLRBitSet *FOLLOW_ELLIPSIS_in_args1029;
static const unsigned long long FOLLOW_ELLIPSIS_in_args1029_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ELLIPSIS_in_args1044;
static const unsigned long long FOLLOW_ELLIPSIS_in_args1044_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LIST_in_list1064;
static const unsigned long long FOLLOW_LIST_in_list1064_data[] = { 0x0000000000000004LL};
static ANTLRBitSet *FOLLOW_listElement_in_list1067;
static const unsigned long long FOLLOW_listElement_in_list1067_data[] = { 0x3DB7D00000003058LL};
static ANTLRBitSet *FOLLOW_expr_in_listElement1083;
static const unsigned long long FOLLOW_expr_in_listElement1083_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_TNULL_in_listElement1087;
static const unsigned long long FOLLOW_TNULL_in_listElement1087_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global globalAttributeScopeImplementation

#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
@implementation template_Scope  /* start of ruleAttributeScopeImplementation */
@synthesize cstate;

+ (template_Scope *)newtemplate_Scope
{
    return [[template_Scope alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of template_Scope get and set functions */

- (CompilationState *)getcstate { return( cstate ); }

- (void)setcstate:(CompilationState *)aVal { cstate = aVal; }

/* End of template_Scope get and set functions */

@end /* end of ruleAttributeScopeImplementation */



#pragma mark Rule Return Scopes returnScopeImplementation
@implementation CodeGenerator_region_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
+ (CodeGenerator_region_return *)newCodeGenerator_region_return
{
    return [[CodeGenerator_region_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }

/* End of iterate get and set functions */



@end /* end of returnScope implementation */


@implementation CodeGenerator_subtemplate_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize name;
@synthesize nargs;
+ (CodeGenerator_subtemplate_return *)newCodeGenerator_subtemplate_return
{
    return [[CodeGenerator_subtemplate_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSString *)getname { return( name ); }

- (void)setname:(NSString *)aVal { name = aVal; }

- (NSInteger)getnargs { return( nargs ); }

- (void)setnargs:(NSInteger)aVal { nargs = aVal; }

/* End of iterate get and set functions */



@end /* end of returnScope implementation */


@implementation CodeGenerator_conditional_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_conditional_return *)newCodeGenerator_conditional_return
{
    return [[CodeGenerator_conditional_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

@end /* end of returnScope implementation */


@implementation CodeGenerator_mapTemplateRef_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_mapTemplateRef_return *)newCodeGenerator_mapTemplateRef_return
{
    return [[CodeGenerator_mapTemplateRef_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

@end /* end of returnScope implementation */

@implementation CodeGenerator_includeExpr_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_includeExpr_return *)newCodeGenerator_includeExpr_return
{
    return [[CodeGenerator_includeExpr_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}



@end /* end of returnScope implementation */


@implementation CodeGenerator_primary_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_primary_return *)newCodeGenerator_primary_return
{
    return [[CodeGenerator_primary_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}



@end /* end of returnScope implementation */


@implementation CodeGenerator_args_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
@synthesize n;
@synthesize namedArgs;
@synthesize passThru;
+ (CodeGenerator_args_return *)newCodeGenerator_args_return
{
    return [[CodeGenerator_args_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}

/* start of iterate get and set functions */

- (NSInteger)getn { return( n ); }

- (void)setn:(NSInteger)aVal { n = aVal; }

- (BOOL)getnamedArgs { return( namedArgs ); }

- (void)setnamedArgs:(BOOL)aVal { namedArgs = aVal; }

- (BOOL)getpassThru { return( passThru ); }

- (void)setpassThru:(BOOL)aVal { passThru = aVal; }

/* End of iterate get and set functions */



@end /* end of returnScope implementation */


@implementation CodeGenerator_listElement_return /* returnScopeImplementation */
 /* start of synthesize -- OBJC-Line 1837 */
+ (CodeGenerator_listElement_return *)newCodeGenerator_listElement_return
{
    return [[CodeGenerator_listElement_return alloc] init];
}

- (id) init
{
    self = [super init];
    return self;
}



@end /* end of returnScope implementation */



@implementation CodeGenerator  // line 637

#pragma mark Dynamic Rule Scopes ruleAttributeScope
/* ruleAttributeScope */
static SymbolStack *template_stack;


#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start actions.(actionScope).synthesize */
    @synthesize template_scope;
    @synthesize outermostTemplateName; // name of overall template
    @synthesize outermostImpl;
    @synthesize templateToken;// overall template token
    @synthesize template; // overall template text
    @synthesize errMgr;

/* ObjC start synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_template_in_templateAndEOF74 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_templateAndEOF74_data Count:(NSUInteger)1] retain];
    FOLLOW_EOF_in_templateAndEOF77 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_templateAndEOF77_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_template101 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_template101_data Count:(NSUInteger)1] retain];
    FOLLOW_element_in_chunk116 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_element_in_chunk116_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element129 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element129_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element131 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element131_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element133 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element133_data Count:(NSUInteger)1] retain];
    FOLLOW_compoundElement_in_element141 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_compoundElement_in_element141_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENTED_EXPR_in_element151 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENTED_EXPR_in_element151_data Count:(NSUInteger)1] retain];
    FOLLOW_INDENT_in_element153 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INDENT_in_element153_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element157 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element157_data Count:(NSUInteger)1] retain];
    FOLLOW_singleElement_in_element165 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_singleElement_in_element165_data Count:(NSUInteger)1] retain];
    FOLLOW_exprElement_in_singleElement179 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exprElement_in_singleElement179_data Count:(NSUInteger)1] retain];
    FOLLOW_TEXT_in_singleElement184 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TEXT_in_singleElement184_data Count:(NSUInteger)1] retain];
    FOLLOW_NEWLINE_in_singleElement193 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_NEWLINE_in_singleElement193_data Count:(NSUInteger)1] retain];
    FOLLOW_ifstat_in_compoundElement207 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ifstat_in_compoundElement207_data Count:(NSUInteger)1] retain];
    FOLLOW_region_in_compoundElement213 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_region_in_compoundElement213_data Count:(NSUInteger)1] retain];
    FOLLOW_EXPR_in_exprElement232 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EXPR_in_exprElement232_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_exprElement234 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_exprElement234_data Count:(NSUInteger)1] retain];
    FOLLOW_exprOptions_in_exprElement237 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_exprOptions_in_exprElement237_data Count:(NSUInteger)1] retain];
    FOLLOW_REGION_in_region275 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_REGION_in_region275_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_region277 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_region277_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_region287 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_region287_data Count:(NSUInteger)1] retain];
    FOLLOW_SUBTEMPLATE_in_subtemplate320 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_SUBTEMPLATE_in_subtemplate320_data Count:(NSUInteger)1] retain];
    FOLLOW_ARGS_in_subtemplate327 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ARGS_in_subtemplate327_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_subtemplate330 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_subtemplate330_data Count:(NSUInteger)1] retain];
    FOLLOW_template_in_subtemplate347 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_template_in_subtemplate347_data Count:(NSUInteger)1] retain];
    FOLLOW_IF_in_ifstat384 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_IF_in_ifstat384_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat386 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat386_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat396 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat396_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSEIF_in_ifstat406 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELSEIF_in_ifstat406_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_ifstat420 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_ifstat420_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat432 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat432_data Count:(NSUInteger)1] retain];
    FOLLOW_ELSE_in_ifstat455 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELSE_in_ifstat455_data Count:(NSUInteger)1] retain];
    FOLLOW_chunk_in_ifstat469 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_chunk_in_ifstat469_data Count:(NSUInteger)1] retain];
    FOLLOW_OR_in_conditional503 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_OR_in_conditional503_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional505 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional505_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional507 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional507_data Count:(NSUInteger)1] retain];
    FOLLOW_AND_in_conditional517 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_AND_in_conditional517_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional519 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional519_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional521 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional521_data Count:(NSUInteger)1] retain];
    FOLLOW_BANG_in_conditional531 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BANG_in_conditional531_data Count:(NSUInteger)1] retain];
    FOLLOW_conditional_in_conditional533 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_conditional_in_conditional533_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_conditional545 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_conditional545_data Count:(NSUInteger)1] retain];
    FOLLOW_OPTIONS_in_exprOptions559 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_OPTIONS_in_exprOptions559_data Count:(NSUInteger)1] retain];
    FOLLOW_option_in_exprOptions561 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_option_in_exprOptions561_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_option573 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_option573_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_option575 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_option575_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_option577 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_option577_data Count:(NSUInteger)1] retain];
    FOLLOW_ZIP_in_expr596 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ZIP_in_expr596_data Count:(NSUInteger)1] retain];
    FOLLOW_ELEMENTS_in_expr599 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELEMENTS_in_expr599_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr602 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr602_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr609 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr609_data Count:(NSUInteger)1] retain];
    FOLLOW_MAP_in_expr621 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_MAP_in_expr621_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_expr623 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_expr623_data Count:(NSUInteger)1] retain];
    FOLLOW_mapTemplateRef_in_expr626 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_mapTemplateRef_in_expr626_data Count:(NSUInteger)1] retain];
    FOLLOW_prop_in_expr641 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_prop_in_expr641_data Count:(NSUInteger)1] retain];
    FOLLOW_includeExpr_in_expr646 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_includeExpr_in_expr646_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_in_prop656 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_in_prop656_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop658 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop658_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_prop660 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_prop660_data Count:(NSUInteger)1] retain];
    FOLLOW_PROP_IND_in_prop674 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_PROP_IND_in_prop674_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop676 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop676_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_prop678 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_prop678_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_mapTemplateRef698 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_mapTemplateRef698_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_mapTemplateRef700 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_mapTemplateRef700_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef710 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef710_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_mapTemplateRef723 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_mapTemplateRef723_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_mapTemplateRef735 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_mapTemplateRef735_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_mapTemplateRef737 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_mapTemplateRef737_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_mapTemplateRef747 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_mapTemplateRef747_data Count:(NSUInteger)1] retain];
    FOLLOW_EXEC_FUNC_in_includeExpr769 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EXEC_FUNC_in_includeExpr769_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr771 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr771_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_includeExpr773 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_includeExpr773_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_in_includeExpr784 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_in_includeExpr784_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr786 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr786_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr788 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr788_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_in_includeExpr799 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_in_includeExpr799_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr801 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr801_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_includeExpr803 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_includeExpr803_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_REGION_in_includeExpr814 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_REGION_in_includeExpr814_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr816 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr816_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr826 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr826_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_includeExpr828 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_includeExpr828_data Count:(NSUInteger)1] retain];
    FOLLOW_primary_in_includeExpr836 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_primary_in_includeExpr836_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_primary847 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_primary847_data Count:(NSUInteger)1] retain];
    FOLLOW_STRING_in_primary857 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_primary857_data Count:(NSUInteger)1] retain];
    FOLLOW_T_TRUE_in_primary867 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_primary867_data Count:(NSUInteger)1] retain];
    FOLLOW_T_FALSE_in_primary876 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_primary876_data Count:(NSUInteger)1] retain];
    FOLLOW_subtemplate_in_primary885 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_subtemplate_in_primary885_data Count:(NSUInteger)1] retain];
    FOLLOW_list_in_primary912 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_list_in_primary912_data Count:(NSUInteger)1] retain];
    FOLLOW_INCLUDE_IND_in_primary919 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_INCLUDE_IND_in_primary919_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary924 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary924_data Count:(NSUInteger)1] retain];
    FOLLOW_args_in_primary938 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_args_in_primary938_data Count:(NSUInteger)1] retain];
    FOLLOW_TO_STR_in_primary958 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TO_STR_in_primary958_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_primary960 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_primary960_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_arg973 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_arg973_data Count:(NSUInteger)1] retain];
    FOLLOW_arg_in_args989 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_arg_in_args989_data Count:(NSUInteger)1] retain];
    FOLLOW_EQUALS_in_args1008 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EQUALS_in_args1008_data Count:(NSUInteger)1] retain];
    FOLLOW_ID_in_args1010 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_args1010_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_args1012 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_args1012_data Count:(NSUInteger)1] retain];
    FOLLOW_ELLIPSIS_in_args1029 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELLIPSIS_in_args1029_data Count:(NSUInteger)1] retain];
    FOLLOW_ELLIPSIS_in_args1044 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ELLIPSIS_in_args1044_data Count:(NSUInteger)1] retain];
    FOLLOW_LIST_in_list1064 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LIST_in_list1064_data Count:(NSUInteger)1] retain];
    FOLLOW_listElement_in_list1067 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_listElement_in_list1067_data Count:(NSUInteger)1] retain];
    FOLLOW_expr_in_listElement1083 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_expr_in_listElement1083_data Count:(NSUInteger)1] retain];
    FOLLOW_TNULL_in_listElement1087 = [[ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_TNULL_in_listElement1087_data Count:(NSUInteger)1] retain];

    [BaseRecognizer setTokenNames:[[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"BIGSTRING_NO_NL", @"T_FALSE", @"T_TRUE", @"IF", @"ELSE", 
 @"ELSEIF", @"ENDIF", @"SUPER", @"SEMI", @"BANG", @"ELLIPSIS", @"EQUALS", 
 @"COLON", @"LPAREN", @"RPAREN", @"LBRACK", @"RBRACK", @"COMMA", @"DOT", 
 @"LCURLY", @"RCURLY", @"TEXT", @"LDELIM", @"RDELIM", @"PIPE", @"OR", @"AND", 
 @"INDENT", @"NEWLINE", @"AT", @"END", @"ARGS", @"ELEMENTS", @"EXEC_FUNC", 
 @"EXPR", @"INCLUDE", @"INCLUDE_IND", @"INCLUDE_REGION", @"INCLUDE_SUPER", 
 @"INCLUDE_SUPER_REGION", @"INDENTED_EXPR", @"LIST", @"MAP", @"OPTIONS", 
 @"PROP", @"PROP_IND", @"REGION", @"SUBTEMPLATE", @"TNULL", @"TO_STR", @"ZIP", nil] retain]];
    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g"];
}

+ (CodeGenerator *)newCodeGenerator:(id<TreeNodeStream>)aStream
{
    return [[CodeGenerator alloc] initWithStream:aStream];
}

/* ObjC start actions.(actionScope).methods */

+ (id) newCodeGenerator:(id<TreeNodeStream>)anInput
                 errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(STToken *)aTemplateToken
{
    return [[CodeGenerator alloc] init:anInput
                                errMgr:anErrMgr
                                  name:aName
                              template:aTemplate
                                 token:aTemplateToken];
}

- (id) initWithStream:(id<TreeNodeStream>)aStream
{
    self = [super initWithStream:aStream State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:22+1]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [[template_Scope newtemplate_Scope] retain];
        template_stack = [[SymbolStack newSymbolStackWithLen:30] retain];
        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (id) init:(id<TreeNodeStream>)anInput
                     errMgr:(ErrorManager *)anErrMgr
                   name:(NSString *)aName
               template:(NSString *)aTemplate
                  token:(STToken *)aTemplateToken
{
    self=[super initWithStream:anInput State:[RecognizerSharedState newRecognizerSharedState]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        template_scope = [[template_Scope newtemplate_Scope] retain];
        template_stack = [[SymbolStack newSymbolStackWithLen:30] retain];
        errMgr = anErrMgr;
        if ( errMgr ) [errMgr retain];
        outermostTemplateName = aName;
        if ( outermostTemplateName ) [outermostTemplateName retain];
        template = aTemplate;
        if ( template ) [template retain];
        templateToken = aTemplateToken;
        if ( templateToken ) [templateToken retain];
    }
    return self;
}

- (void) dealloc
{
#ifdef DEBUG_DEALLOC
    NSLog( @"called dealloc in CodeGenerator" );
#endif
    if ( outermostTemplateName ) [outermostTemplateName release];
    if ( outermostImpl ) [outermostImpl release];
    if ( templateToken ) [templateToken release];
    if ( template ) [template release];
    if ( errMgr ) [errMgr release];
    [super dealloc];
}

// convience funcs to hide offensive sending of emit messages to
// CompilationState temp data object.

- (void) emit1:(CommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode arg:arg];
}

- (void) emit1:(CommonTree *)opAST opcode:(short)anOpcode s:(NSString *)arg
{
    [((template_Scope *)[template_stack peek]).cstate emit1:opAST opcode:anOpcode s:arg];
}

- (void) emit2:(CommonTree *)opAST opcode:(short)anOpcode arg:(NSInteger)anArg arg2:(NSInteger)anArg2
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode arg:anArg arg2:anArg2];
}

- (void) emit2:(CommonTree *)opAST opcode:(short)anOpcode s:(NSString *)s arg2:(NSInteger)anArg
{
    [((template_Scope *)[template_stack peek]).cstate emit2:opAST opcode:anOpcode s:s arg2:anArg];
}

- (void) emit:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:anOpcode];
}

- (void) emit:(CommonTree *)opAST opcode:(short)anOpcode
{
    [((template_Scope *)[template_stack peek]).cstate emit:opAST opcode:anOpcode];
}

- (void) insert:(NSInteger)addr opcode:(short)anOpcode s:(NSString *)s
{
    [((template_Scope *)[template_stack peek]).cstate insert:addr opcode:anOpcode s:s];
}

- (void) setOption:(CommonTree *)anID
{
    [((template_Scope *)[template_stack peek]).cstate setOption:anID];
}

- (void) write:(NSInteger)addr value:(short)value
{
    [((template_Scope *)[template_stack peek]).cstate write:addr value:value];
}

- (NSInteger) address { return ((template_Scope *)[template_stack peek]).cstate.ip; }
- (void) func:(CommonTree *)aTree { [((template_Scope *)[template_stack peek]).cstate func:templateToken tree:aTree]; }
- (void) refAttr:(CommonTree *)aTree { [((template_Scope *)[template_stack peek]).cstate refAttr:templateToken tree:aTree]; }
- (NSInteger) defineString:(NSString *)s { return [((template_Scope *)[template_stack peek]).cstate defineString:s]; }

/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */
/*
 * $ANTLR start templateAndEOF
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:1: templateAndEOF : template[nil ,nil] EOF ;
 */
- (void) templateAndEOF
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:16: ( template[nil ,nil] EOF ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:216:18: template[nil ,nil] EOF // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_template_in_templateAndEOF74];
        [self template:nil arg1:nil];

        [self popFollow];



        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_templateAndEOF77]; 

        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end templateAndEOF */

/*
 * $ANTLR start template
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:218:1: template[NSString *name, AMutableArray *args] returns [CompiledST *impl] : chunk ;
 */
- (CompiledST *) template:(NSString *)name arg1:(AMutableArray *)args 
{
    /* ruleScopeSetUp */
    [template_stack push:[[template_Scope newtemplate_Scope] retain]];
    /* ruleDeclarations */
    CompiledST * impl = nil ;



        /* scopeSetAttributeRef */((template_Scope *)[template_stack peek]).cstate =  [[CompilationState newCompilationState:errMgr name:name stream:[input getTokenStream]] retain];
        
    impl =  ((template_Scope *)[template_stack peek]).cstate.impl;

        if ( [template_stack count] == 1 ) outermostImpl = 
    impl
    ;
        [impl
     defineFormalArgs:args]; // make sure args are defined prior to compilation
        if ( name != nil && [name hasPrefix:Compiler.SUBTEMPLATE_PREFIX] ) {
            [
    impl
     addArg:[FormalArgument newFormalArgument:@"i"]];
            [impl
     addArg:[FormalArgument newFormalArgument:@"i0"]];
        }
        impl
    .template = template; // always forget the entire template; char indexes are relative to it

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:233:2: ( chunk ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:233:4: chunk // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_chunk_in_template101];
        [self chunk];

        [self popFollow];




         // finish off the CompiledST result
                if ( ((template_Scope *)[template_stack peek]).cstate.stringtable != nil ) 
        impl
        .strings = [((template_Scope *)[template_stack peek]).cstate.stringtable toArray];
                
        impl
        .codeSize = ((template_Scope *)[template_stack peek]).cstate.ip;
                


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */
        [template_stack pop];
    }
    return impl;
}
/* $ANTLR end template */

/*
 * $ANTLR start chunk
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:240:1: chunk : ( element )* ;
 */
- (void) chunk
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:241:2: ( ( element )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:241:4: ( element )* // alt
        {


        do {
            NSInteger alt1=2;
            NSInteger LA1_0 = [input LA:1];
            if ( (LA1_0==IF||LA1_0==TEXT||LA1_0==NEWLINE||LA1_0==EXPR||LA1_0==INDENTED_EXPR||LA1_0==REGION) ) {
                alt1=1;
            }


            switch (alt1) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:241:4: element // alt
                    {

                    /* ruleRef */
                    [self pushFollow:FOLLOW_element_in_chunk116];
                    [self element];

                    [self popFollow];



                    }
                    break;

                default :
                    goto loop1;
            }
        } while (YES);
        loop1: ;


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end chunk */

/*
 * $ANTLR start element
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:244:1: element : ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement );
 */
- (void) element
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        CommonTree *INDENT1 = nil;
        CommonTree *INDENT2 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:245:2: ( ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) | compoundElement[nil] | ^( INDENTED_EXPR INDENT singleElement ) | singleElement ) //ruleblock
        NSInteger alt2=4;
        unichar charLA2 = [input LA:1];
        switch (charLA2) {
            case INDENTED_EXPR: ;
                {
                NSInteger LA2_1 = [input LA:2];

                if ( (LA2_1==DOWN) ) {
                    NSInteger LA2_4 = [input LA:3];

                    if ( (LA2_4==INDENT) ) {
                        NSInteger LA2_5 = [input LA:4];

                        if ( (LA2_5==IF||LA2_5==REGION) ) {
                            alt2=1;
                        }
                        else if ( (LA2_5==TEXT||LA2_5==NEWLINE||LA2_5==EXPR) ) {
                            alt2=3;
                        }
                        else {
                            NoViableAltException *nvae = [NoViableAltException newException:2 state:5 stream:input];
                            nvae.c = LA2_5;
                            @throw nvae;

                        }
                    }
                    else {
                        NoViableAltException *nvae = [NoViableAltException newException:2 state:4 stream:input];
                        nvae.c = LA2_4;
                        @throw nvae;

                    }
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:2 state:1 stream:input];
                    nvae.c = LA2_1;
                    @throw nvae;

                }
                }
                break;
            case IF: ;
            case REGION: ;
                {
                alt2=2;
                }
                break;
            case TEXT: ;
            case NEWLINE: ;
            case EXPR: ;
                {
                alt2=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:2 state:0 stream:input];
            nvae.c = charLA2;
            @throw nvae;

        }

        switch (alt2) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:245:4: ^( INDENTED_EXPR INDENT compoundElement[$INDENT] ) // alt
                {


                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element129]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    INDENT1=(CommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element131]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_compoundElement_in_element133];
                    [self compoundElement:INDENT1 ];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:246:4: compoundElement[nil] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_compoundElement_in_element141];
                [self compoundElement:nil ];

                [self popFollow];



                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:247:7: ^( INDENTED_EXPR INDENT singleElement ) // alt
                {


                [self match:input TokenType:INDENTED_EXPR Follow:FOLLOW_INDENTED_EXPR_in_element151]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    INDENT2=(CommonTree *)[self match:input TokenType:INDENT Follow:FOLLOW_INDENT_in_element153]; 


                    [((template_Scope *)[template_stack peek]).cstate indent:INDENT2];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_singleElement_in_element157];
                    [self singleElement];

                    [self popFollow];




                    [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];


                    [self match:input TokenType:UP Follow:nil]; 


                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:248:4: singleElement // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_singleElement_in_element165];
                [self singleElement];

                [self popFollow];



                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end element */

/*
 * $ANTLR start singleElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:251:1: singleElement : ( exprElement | TEXT | NEWLINE );
 */
- (void) singleElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        CommonTree *TEXT3 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:252:2: ( exprElement | TEXT | NEWLINE ) //ruleblock
        NSInteger alt3=3;
        unichar charLA3 = [input LA:1];
        switch (charLA3) {
            case EXPR: ;
                {
                alt3=1;
                }
                break;
            case TEXT: ;
                {
                alt3=2;
                }
                break;
            case NEWLINE: ;
                {
                alt3=3;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:3 state:0 stream:input];
            nvae.c = charLA3;
            @throw nvae;

        }

        switch (alt3) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:252:4: exprElement // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_exprElement_in_singleElement179];
                [self exprElement];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:253:4: TEXT // alt
                {

                TEXT3=(CommonTree *)[self match:input TokenType:TEXT Follow:FOLLOW_TEXT_in_singleElement184]; 



                        if ( [(TEXT3!=nil?TEXT3.text:@"") length]>0 ) {
                            [self emit1:TEXT3 opcode:Bytecode.INSTR_WRITE_STR s:(TEXT3!=nil?TEXT3.text:nil)];
                        }
                        


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:259:4: NEWLINE // alt
                {

                [self match:input TokenType:NEWLINE Follow:FOLLOW_NEWLINE_in_singleElement193]; 


                [self emit:Bytecode.INSTR_NEWLINE];


                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end singleElement */

/*
 * $ANTLR start compoundElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:262:1: compoundElement[CommonTree *indent] : ( ifstat[indent] | region[indent] );
 */
- (void) compoundElement:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:263:2: ( ifstat[indent] | region[indent] ) //ruleblock
        NSInteger alt4=2;
        NSInteger LA4_0 = [input LA:1];

        if ( (LA4_0==IF) ) {
            alt4=1;
        }
        else if ( (LA4_0==REGION) ) {
            alt4=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:4 state:0 stream:input];
            nvae.c = LA4_0;
            @throw nvae;

        }
        switch (alt4) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:263:4: ifstat[indent] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_ifstat_in_compoundElement207];
                [self ifstat:indent ];

                [self popFollow];



                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:264:4: region[indent] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_region_in_compoundElement213];
                [self region:indent ];

                [self popFollow];



                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end compoundElement */

/*
 * $ANTLR start exprElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:267:1: exprElement : ^( EXPR expr ( exprOptions )? ) ;
 */
- (void) exprElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

     short op = Bytecode.INSTR_WRITE; 
    @try {
        CommonTree *EXPR4 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:269:2: ( ^( EXPR expr ( exprOptions )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:269:4: ^( EXPR expr ( exprOptions )? ) // alt
        {


        EXPR4=(CommonTree *)[self match:input TokenType:EXPR Follow:FOLLOW_EXPR_in_exprElement232]; 

            [self match:input TokenType:DOWN Follow:nil]; 

            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_exprElement234];
            [self expr];

            [self popFollow];



            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:269:17: ( exprOptions )? // block
            NSInteger alt5=2;
            NSInteger LA5_0 = [input LA:1];

            if ( (LA5_0==OPTIONS) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:269:18: exprOptions // alt
                    {

                    /* ruleRef */
                    [self pushFollow:FOLLOW_exprOptions_in_exprElement237];
                    [self exprOptions];

                    [self popFollow];




                    op=Bytecode.INSTR_WRITE_OPT;


                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 



        [self emit:EXPR4 opcode:op];


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end exprElement */

/*
 * $ANTLR start region
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:273:1: region[CommonTree *indent] returns [NSString *name] : ^( REGION ID template[$name,nil] ) ;
 */
- (CodeGenerator_region_return *) region:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_region_return * retval = [CodeGenerator_region_return newCodeGenerator_region_return];
    [retval setStart:[input LT:1]];



        if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        CommonTree *ID5 = nil;
         CompiledST * template6 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:280:2: ( ^( REGION ID template[$name,nil] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:280:4: ^( REGION ID template[$name,nil] ) // alt
        {


        [self match:input TokenType:REGION Follow:FOLLOW_REGION_in_region275]; 

            [self match:input TokenType:DOWN Follow:nil]; 

            ID5=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_region277]; 


             retval.name = [STGroup getMangledRegionName:outermostTemplateName name:(ID5!=nil?ID5.text:nil)]; /* added to returnSetAttributeRef */



            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_region287];
            template6 = [self template:
            retval.name  /* added to returnAttributeRef */
             arg1:nil];

            [self popFollow];





                        CompiledST *sub = template6
            ;
                        sub.isRegion = true;
                        sub.regionDefType = /* ST.RegionType. */ EMBEDDED;
                        sub.templateDefStartToken = (STToken *)ID5.token;
                        //sub.dump();
                        [outermostImpl addImplicitlyDefinedTemplate:sub];
                        [self emit2:((CommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:
            retval.name  /* added to returnAttributeRef */
             arg2:0];
                        [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_WRITE];
                        


            [self match:input TokenType:UP Follow:nil]; 


        }

        /* token+rule list labels */



            if ( indent != nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];


    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end region */

/*
 * $ANTLR start subtemplate
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:296:1: subtemplate returns [NSString *name, NSInteger nargs] : ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ;
 */
- (CodeGenerator_subtemplate_return *) subtemplate
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_subtemplate_return * retval = [CodeGenerator_subtemplate_return newCodeGenerator_subtemplate_return];
    [retval setStart:[input LT:1]];



        retval.name = [Compiler getNewSubtemplateName]; /* added to returnSetAttributeRef */

        AMutableArray *args = [AMutableArray arrayWithCapacity:5];

    @try {
        CommonTree *ID7 = nil;
        CommonTree *SUBTEMPLATE9 = nil;
         CompiledST * template8 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:301:2: ( ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:301:4: ^( SUBTEMPLATE ( ^( ARGS ( ID )+ ) )* template[$name,args] ) // alt
        {


        SUBTEMPLATE9=(CommonTree *)[self match:input TokenType:SUBTEMPLATE Follow:FOLLOW_SUBTEMPLATE_in_subtemplate320]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 


            do {
                NSInteger alt7=2;
                NSInteger LA7_0 = [input LA:1];
                if ( (LA7_0==ARGS) ) {
                    alt7=1;
                }


                switch (alt7) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:302:5: ^( ARGS ( ID )+ ) // alt
                        {


                        [self match:input TokenType:ARGS Follow:FOLLOW_ARGS_in_subtemplate327]; 

                            [self match:input TokenType:DOWN Follow:nil]; 

                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:302:12: ( ID )+ // positiveClosureBlock
                            NSInteger cnt6 = 0;
                            do {
                                NSInteger alt6 = 2;
                                NSInteger LA6_0 = [input LA:1];
                                if ( (LA6_0==ID) ) {
                                    alt6=1;
                                }


                                switch (alt6) {
                                    case 1 : ;
                                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:302:13: ID // alt
                                        {

                                        ID7=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_subtemplate330]; 


                                        [args addObject:[FormalArgument newFormalArgument:(ID7!=nil?ID7.text:nil)]];


                                        }
                                        break;

                                    default :
                                        if ( cnt6 >= 1 )
                                            goto loop6;
                                        EarlyExitException *eee =
                                            [EarlyExitException newException:input decisionNumber:6];
                                        @throw eee;
                                }
                                cnt6++;
                            } while (YES);
                            loop6: ;


                            [self match:input TokenType:UP Follow:nil]; 


                        }
                        break;

                    default :
                        goto loop7;
                }
            } while (YES);
            loop7: ;



             retval.nargs = [args count]; /* added to returnSetAttributeRef */



            /* ruleRef */
            [self pushFollow:FOLLOW_template_in_subtemplate347];
            template8 = [self template:
            retval.name  /* added to returnAttributeRef */
             arg1:args];

            [self popFollow];




                        CompiledST *sub = template8;
                        sub.isAnonSubtemplate = YES;
                        sub.templateDefStartToken = (STToken *) SUBTEMPLATE9.token;
                        sub.ast = SUBTEMPLATE9;
                        [sub.ast setUnknownTokenBoundaries];
                        sub.tokens = [input getTokenStream];
                        //sub.dump();
                        [outermostImpl addImplicitlyDefinedTemplate:sub];
                        


            [self match:input TokenType:UP Follow:nil]; 
        }


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end subtemplate */

/*
 * $ANTLR start ifstat
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:318:1: ifstat[CommonTree *indent] : ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ;
 */
- (void) ifstat:(CommonTree *)indent 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */


        /** Tracks address of branch operand (in code block).  It's how
         *  we backpatch forward references when generating code for IFs.
         */
        NSInteger prevBranchOperand = -1;
        /** Branch instruction operands that are forward refs to end of IF.
         *  We need to update them once we see the endif.
         */
        IntArray *endRefs = [[IntArray newArrayWithLen:16] retain];
        if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate indent:indent];

    @try {
        CommonTree *i = nil;
        CommonTree *eif = nil;
        CommonTree *el = nil;
         CodeGenerator_conditional_return * ec = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:333:2: ( ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:333:4: ^(i= 'if' conditional chunk ( ^(eif= 'elseif' ec= conditional chunk ) )* ( ^(el= 'else' chunk ) )? ) // alt
        {


        i=(CommonTree *)[self match:input TokenType:IF Follow:FOLLOW_IF_in_ifstat384]; 

            [self match:input TokenType:DOWN Follow:nil]; 

            /* ruleRef */
            [self pushFollow:FOLLOW_conditional_in_ifstat386];
            [self conditional];

            [self popFollow];





                        prevBranchOperand = [self address]+1;
                        [self emit1:i opcode:Bytecode.INSTR_BRF arg:-1]; // write placeholder as branch target
                        


            /* ruleRef */
            [self pushFollow:FOLLOW_chunk_in_ifstat396];
            [self chunk];

            [self popFollow];




            do {
                NSInteger alt8=2;
                NSInteger LA8_0 = [input LA:1];
                if ( (LA8_0==ELSEIF) ) {
                    alt8=1;
                }


                switch (alt8) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:339:6: ^(eif= 'elseif' ec= conditional chunk ) // alt
                        {


                        eif=(CommonTree *)[self match:input TokenType:ELSEIF Follow:FOLLOW_ELSEIF_in_ifstat406]; 




                                        [endRefs addInteger:[self address]+1];
                                        [self emit1:eif opcode:Bytecode.INSTR_BR arg:-1]; // br end
                                        // update previous branch instruction
                                        [self write:prevBranchOperand value:(short)[self address]];
                                        prevBranchOperand = -1;
                                        


                            [self match:input TokenType:DOWN Follow:nil]; 

                            /* ruleRef */
                            [self pushFollow:FOLLOW_conditional_in_ifstat420];
                            ec = [self conditional];

                            [self popFollow];





                                            prevBranchOperand = [self address]+1;
                                            // write placeholder as branch target
                                            [self emit1:(ec!=nil?((CommonTree *)ec.start):nil) opcode:Bytecode.INSTR_BRF arg:-1];
                                            


                            /* ruleRef */
                            [self pushFollow:FOLLOW_chunk_in_ifstat432];
                            [self chunk];

                            [self popFollow];



                            [self match:input TokenType:UP Follow:nil]; 


                        }
                        break;

                    default :
                        goto loop8;
                }
            } while (YES);
            loop8: ;


            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:356:4: ( ^(el= 'else' chunk ) )? // block
            NSInteger alt9=2;
            NSInteger LA9_0 = [input LA:1];

            if ( (LA9_0==ELSE) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 : ;
                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:356:6: ^(el= 'else' chunk ) // alt
                    {


                    el=(CommonTree *)[self match:input TokenType:ELSE Follow:FOLLOW_ELSE_in_ifstat455]; 




                                        [endRefs addInteger:[self address]+1];
                                        [self emit1:el opcode:Bytecode.INSTR_BR arg:-1]; // br end
                                        // update previous branch instruction
                                        [self write:prevBranchOperand value:(short)[self address]];
                                        prevBranchOperand = -1;
                                        


                    if ( [input LA:1] == DOWN ) {
                        [self match:input TokenType:DOWN Follow:nil]; 

                        /* ruleRef */
                        [self pushFollow:FOLLOW_chunk_in_ifstat469];
                        [self chunk];

                        [self popFollow];



                        [self match:input TokenType:UP Follow:nil]; 
                    }


                    }
                    break;

            }


            [self match:input TokenType:UP Follow:nil]; 




                if ( prevBranchOperand>=0 ) {
                    [self write:prevBranchOperand value:(short)[self address]];
                }
                for (int i = 0; i < [endRefs count]; i++) {
                    [self write:[endRefs integerAtIndex:i] value:(short)[self address]];
                }
                


        }

        /* token+rule list labels */



            if ( indent!=nil ) [((template_Scope *)[template_stack peek]).cstate emit:Bytecode.INSTR_DEDENT];


    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end ifstat */

/*
 * $ANTLR start conditional
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:378:1: conditional : ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr );
 */
- (CodeGenerator_conditional_return *) conditional
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_conditional_return * retval = [CodeGenerator_conditional_return newCodeGenerator_conditional_return];
    [retval setStart:[input LT:1]];


    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:379:2: ( ^( '||' conditional conditional ) | ^( '&&' conditional conditional ) | ^( '!' conditional ) | expr ) //ruleblock
        NSInteger alt10=4;
        unichar charLA10 = [input LA:1];
        switch (charLA10) {
            case OR: ;
                {
                alt10=1;
                }
                break;
            case AND: ;
                {
                alt10=2;
                }
                break;
            case BANG: ;
                {
                alt10=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case MAP: ;
            case PROP: ;
            case PROP_IND: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
            case ZIP: ;
                {
                alt10=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:10 state:0 stream:input];
            nvae.c = charLA10;
            @throw nvae;

        }

        switch (alt10) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:379:4: ^( '||' conditional conditional ) // alt
                {


                [self match:input TokenType:OR Follow:FOLLOW_OR_in_conditional503]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional505];
                    [self conditional];

                    [self popFollow];



                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional507];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit:Bytecode.INSTR_OR];


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:380:4: ^( '&&' conditional conditional ) // alt
                {


                [self match:input TokenType:AND Follow:FOLLOW_AND_in_conditional517]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional519];
                    [self conditional];

                    [self popFollow];



                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional521];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit:Bytecode.INSTR_AND];


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:381:4: ^( '!' conditional ) // alt
                {


                [self match:input TokenType:BANG Follow:FOLLOW_BANG_in_conditional531]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_conditional_in_conditional533];
                    [self conditional];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit:Bytecode.INSTR_NOT];


                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:382:4: expr // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_conditional545];
                [self expr];

                [self popFollow];



                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end conditional */

/*
 * $ANTLR start exprOptions
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:1: exprOptions : ^( OPTIONS ( option )* ) ;
 */
- (void) exprOptions
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:13: ( ^( OPTIONS ( option )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:15: ^( OPTIONS ( option )* ) // alt
        {


        [self emit:Bytecode.INSTR_OPTIONS];



        [self match:input TokenType:OPTIONS Follow:FOLLOW_OPTIONS_in_exprOptions559]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 


            do {
                NSInteger alt11=2;
                NSInteger LA11_0 = [input LA:1];
                if ( (LA11_0==EQUALS) ) {
                    alt11=1;
                }


                switch (alt11) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:385:63: option // alt
                        {

                        /* ruleRef */
                        [self pushFollow:FOLLOW_option_in_exprOptions561];
                        [self option];

                        [self popFollow];



                        }
                        break;

                    default :
                        goto loop11;
                }
            } while (YES);
            loop11: ;


            [self match:input TokenType:UP Follow:nil]; 
        }


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end exprOptions */

/*
 * $ANTLR start option
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:1: option : ^( '=' ID expr ) ;
 */
- (void) option
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        CommonTree *ID10 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:8: ( ^( '=' ID expr ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:387:10: ^( '=' ID expr ) // alt
        {


        [self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_option573]; 

            [self match:input TokenType:DOWN Follow:nil]; 

            ID10=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_option575]; 

            /* ruleRef */
            [self pushFollow:FOLLOW_expr_in_option577];
            [self expr];

            [self popFollow];



            [self match:input TokenType:UP Follow:nil]; 



        [self setOption:ID10];


        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end option */

/*
 * $ANTLR start expr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:389:1: expr : ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr );
 */
- (void) expr
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    NSInteger nt = 0, ne = 0;
    @try {
        CommonTree *ZIP11 = nil;
        CommonTree *MAP12 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:2: ( ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) | ^( MAP expr ( mapTemplateRef[1] )+ ) | prop | includeExpr ) //ruleblock
        NSInteger alt14=4;
        unichar charLA14 = [input LA:1];
        switch (charLA14) {
            case ZIP: ;
                {
                alt14=1;
                }
                break;
            case MAP: ;
                {
                alt14=2;
                }
                break;
            case PROP: ;
            case PROP_IND: ;
                {
                alt14=3;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
                {
                alt14=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:14 state:0 stream:input];
            nvae.c = charLA14;
            @throw nvae;

        }

        switch (alt14) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:4: ^( ZIP ^( ELEMENTS ( expr )+ ) mapTemplateRef[ne] ) // alt
                {


                ZIP11=(CommonTree *)[self match:input TokenType:ZIP Follow:FOLLOW_ZIP_in_expr596]; 

                    [self match:input TokenType:DOWN Follow:nil]; 


                    [self match:input TokenType:ELEMENTS Follow:FOLLOW_ELEMENTS_in_expr599]; 

                        [self match:input TokenType:DOWN Follow:nil]; 

                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:21: ( expr )+ // positiveClosureBlock
                        NSInteger cnt12 = 0;
                        do {
                            NSInteger alt12 = 2;
                            NSInteger LA12_0 = [input LA:1];
                            if ( (LA12_0==ID||LA12_0==STRING||(LA12_0 >= T_FALSE && LA12_0 <= T_TRUE)||LA12_0==EXEC_FUNC||(LA12_0 >= INCLUDE && LA12_0 <= INCLUDE_SUPER_REGION)||(LA12_0 >= LIST && LA12_0 <= MAP)||(LA12_0 >= PROP && LA12_0 <= PROP_IND)||LA12_0==SUBTEMPLATE||(LA12_0 >= TO_STR && LA12_0 <= ZIP)) ) {
                                alt12=1;
                            }


                            switch (alt12) {
                                case 1 : ;
                                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:391:22: expr // alt
                                    {

                                    /* ruleRef */
                                    [self pushFollow:FOLLOW_expr_in_expr602];
                                    [self expr];

                                    [self popFollow];




                                    ne++;


                                    }
                                    break;

                                default :
                                    if ( cnt12 >= 1 )
                                        goto loop12;
                                    EarlyExitException *eee =
                                        [EarlyExitException newException:input decisionNumber:12];
                                    @throw eee;
                            }
                            cnt12++;
                        } while (YES);
                        loop12: ;


                        [self match:input TokenType:UP Follow:nil]; 


                    /* ruleRef */
                    [self pushFollow:FOLLOW_mapTemplateRef_in_expr609];
                    [self mapTemplateRef:ne ];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit1:ZIP11 opcode:Bytecode.INSTR_ZIP_MAP arg:ne];


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:4: ^( MAP expr ( mapTemplateRef[1] )+ ) // alt
                {


                MAP12=(CommonTree *)[self match:input TokenType:MAP Follow:FOLLOW_MAP_in_expr621]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_expr623];
                    [self expr];

                    [self popFollow];



                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:15: ( mapTemplateRef[1] )+ // positiveClosureBlock
                    NSInteger cnt13 = 0;
                    do {
                        NSInteger alt13 = 2;
                        NSInteger LA13_0 = [input LA:1];
                        if ( ((LA13_0 >= INCLUDE && LA13_0 <= INCLUDE_IND)||LA13_0==SUBTEMPLATE) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                            case 1 : ;
                                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:393:16: mapTemplateRef[1] // alt
                                {

                                /* ruleRef */
                                [self pushFollow:FOLLOW_mapTemplateRef_in_expr626];
                                [self mapTemplateRef:1 ];

                                [self popFollow];




                                nt++;


                                }
                                break;

                            default :
                                if ( cnt13 >= 1 )
                                    goto loop13;
                                EarlyExitException *eee =
                                    [EarlyExitException newException:input decisionNumber:13];
                                @throw eee;
                        }
                        cnt13++;
                    } while (YES);
                    loop13: ;


                    [self match:input TokenType:UP Follow:nil]; 




                        if ( nt>1 )
                            [self emit1:MAP12 opcode:Bytecode.INSTR_ROT_MAP arg:nt];
                        else
                            [self emit:MAP12 opcode:Bytecode.INSTR_MAP];
                        


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:400:4: prop // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_prop_in_expr641];
                [self prop];

                [self popFollow];



                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:401:4: includeExpr // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_includeExpr_in_expr646];
                [self includeExpr];

                [self popFollow];



                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end expr */

/*
 * $ANTLR start prop
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:1: prop : ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) );
 */
- (void) prop
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        CommonTree *PROP13 = nil;
        CommonTree *ID14 = nil;
        CommonTree *PROP_IND15 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:5: ( ^( PROP expr ID ) | ^( PROP_IND expr expr ) ) //ruleblock
        NSInteger alt15=2;
        NSInteger LA15_0 = [input LA:1];

        if ( (LA15_0==PROP) ) {
            alt15=1;
        }
        else if ( (LA15_0==PROP_IND) ) {
            alt15=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:15 state:0 stream:input];
            nvae.c = LA15_0;
            @throw nvae;

        }
        switch (alt15) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:404:7: ^( PROP expr ID ) // alt
                {


                PROP13=(CommonTree *)[self match:input TokenType:PROP Follow:FOLLOW_PROP_in_prop656]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop658];
                    [self expr];

                    [self popFollow];



                    ID14=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_prop660]; 

                    [self match:input TokenType:UP Follow:nil]; 



                [self emit1:PROP13 opcode:Bytecode.INSTR_LOAD_PROP s:(ID14!=nil?ID14.text:nil)];


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:405:4: ^( PROP_IND expr expr ) // alt
                {


                PROP_IND15=(CommonTree *)[self match:input TokenType:PROP_IND Follow:FOLLOW_PROP_IND_in_prop674]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop676];
                    [self expr];

                    [self popFollow];



                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_prop678];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit:PROP_IND15 opcode:Bytecode.INSTR_LOAD_PROP_IND];


                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end prop */

/*
 * $ANTLR start mapTemplateRef
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:408:1: mapTemplateRef[NSInteger num_exprs] : ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) );
 */
- (CodeGenerator_mapTemplateRef_return *) mapTemplateRef:(NSInteger)num_exprs 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_mapTemplateRef_return * retval = [CodeGenerator_mapTemplateRef_return newCodeGenerator_mapTemplateRef_return];
    [retval setStart:[input LT:1]];


    @try {
        CommonTree *INCLUDE16 = nil;
        CommonTree *ID18 = nil;
        CommonTree *INCLUDE_IND20 = nil;
         CodeGenerator_args_return * args17 = nil ;
         
         CodeGenerator_subtemplate_return * subtemplate19 = nil ;
         
         CodeGenerator_args_return * args21 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:409:2: ( ^( INCLUDE ID args ) | subtemplate | ^( INCLUDE_IND expr args ) ) //ruleblock
        NSInteger alt16=3;
        unichar charLA16 = [input LA:1];
        switch (charLA16) {
            case INCLUDE: ;
                {
                alt16=1;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt16=2;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt16=3;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:16 state:0 stream:input];
            nvae.c = charLA16;
            @throw nvae;

        }

        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:409:4: ^( INCLUDE ID args ) // alt
                {


                INCLUDE16=(CommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_mapTemplateRef698]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID18=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_mapTemplateRef700]; 


                    for (NSInteger i=1; i<=num_exprs; i++) [self emit:INCLUDE16 opcode:Bytecode.INSTR_NULL];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef710];
                    args17 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 




                        if ( (args17!=nil?args17.passThru:NO )
                 ) [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU s:(ID18!=nil?ID18.text:nil)];
                        if ( 
                (args17!=nil?args17.namedArgs:NO )
                 )
                            [self emit1:INCLUDE16 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID18!=nil?ID18.text:nil)];
                        else
                            [self emit2:INCLUDE16 opcode:Bytecode.INSTR_NEW s:(ID18!=nil?ID18.text:nil) arg2:(
                (args17!=nil?args17.n:0 )
                +num_exprs)];
                        


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:420:4: subtemplate // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_mapTemplateRef723];
                subtemplate19 = [self subtemplate];

                [self popFollow];




                        if ( (subtemplate19!=nil?subtemplate19.nargs:0 )
                 != num_exprs ) {
                            [errMgr compileTimeError:ANON_ARGUMENT_MISMATCH
                                       templateToken:templateToken
                                                   t:(STToken *)(subtemplate19!=nil?((CommonTree *)subtemplate19.start):nil).token
                                                 arg:(id)(subtemplate19!=nil?subtemplate19.nargs:0 )
                                                arg2:(id)num_exprs];
                        }
                        for (NSInteger i=1; i<=num_exprs; i++) [self emit:(subtemplate19!=nil?((CommonTree *)subtemplate19.start):nil) opcode:Bytecode.INSTR_NULL];
                        [self emit2:(subtemplate19!=nil?((CommonTree *)subtemplate19.start):nil)
                             opcode:Bytecode.INSTR_NEW
                                  s:
                (subtemplate19!=nil?subtemplate19.name:nil )

                               arg2:num_exprs];
                        


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:436:4: ^( INCLUDE_IND expr args ) // alt
                {


                INCLUDE_IND20=(CommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_mapTemplateRef735]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_mapTemplateRef737];
                    [self expr];

                    [self popFollow];
                    [self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_TOSTR];
                    for (NSInteger i=1; i<=num_exprs; i++)
                        [self emit:INCLUDE_IND20 opcode:Bytecode.INSTR_NULL];
                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_mapTemplateRef747];
                    args21 = [self args];

                    [self popFollow];
                    [self emit1:INCLUDE_IND20 opcode:Bytecode.INSTR_NEW_IND arg:((args21!=nil?args21.n:0 )+num_exprs)];
                    [self match:input TokenType:UP Follow:nil]; 


                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end mapTemplateRef */

/*
 * $ANTLR start includeExpr
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:448:1: includeExpr : ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary );
 */
- (CodeGenerator_includeExpr_return *) includeExpr
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_includeExpr_return * retval = [CodeGenerator_includeExpr_return newCodeGenerator_includeExpr_return];
    [retval setStart:[input LT:1]];


    @try {
        CommonTree *ID22 = nil;
        CommonTree *ID24 = nil;
        CommonTree *INCLUDE25 = nil;
        CommonTree *ID27 = nil;
        CommonTree *INCLUDE_SUPER28 = nil;
        CommonTree *ID29 = nil;
        CommonTree *INCLUDE_REGION30 = nil;
        CommonTree *ID31 = nil;
        CommonTree *INCLUDE_SUPER_REGION32 = nil;
         CodeGenerator_args_return * args23 = nil ;
         
         CodeGenerator_args_return * args26 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:449:2: ( ^( EXEC_FUNC ID ( expr )? ) | ^( INCLUDE ID args ) | ^( INCLUDE_SUPER ID args ) | ^( INCLUDE_REGION ID ) | ^( INCLUDE_SUPER_REGION ID ) | primary ) //ruleblock
        NSInteger alt18=6;
        unichar charLA18 = [input LA:1];
        switch (charLA18) {
            case EXEC_FUNC: ;
                {
                alt18=1;
                }
                break;
            case INCLUDE: ;
                {
                alt18=2;
                }
                break;
            case INCLUDE_SUPER: ;
                {
                alt18=3;
                }
                break;
            case INCLUDE_REGION: ;
                {
                alt18=4;
                }
                break;
            case INCLUDE_SUPER_REGION: ;
                {
                alt18=5;
                }
                break;
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case INCLUDE_IND: ;
            case LIST: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
                {
                alt18=6;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:18 state:0 stream:input];
            nvae.c = charLA18;
            @throw nvae;

        }

        switch (alt18) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:449:4: ^( EXEC_FUNC ID ( expr )? ) // alt
                {


                [self match:input TokenType:EXEC_FUNC Follow:FOLLOW_EXEC_FUNC_in_includeExpr769]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID22=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr771]; 

                    // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:449:19: ( expr )? // block
                    NSInteger alt17=2;
                    NSInteger LA17_0 = [input LA:1];

                    if ( (LA17_0==ID||LA17_0==STRING||(LA17_0 >= T_FALSE && LA17_0 <= T_TRUE)||LA17_0==EXEC_FUNC||(LA17_0 >= INCLUDE && LA17_0 <= INCLUDE_SUPER_REGION)||(LA17_0 >= LIST && LA17_0 <= MAP)||(LA17_0 >= PROP && LA17_0 <= PROP_IND)||LA17_0==SUBTEMPLATE||(LA17_0 >= TO_STR && LA17_0 <= ZIP)) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:449:19: expr // alt
                            {

                            /* ruleRef */
                            [self pushFollow:FOLLOW_expr_in_includeExpr773];
                            [self expr];

                            [self popFollow];



                            }
                            break;

                    }


                    [self match:input TokenType:UP Follow:nil]; 



                [self func:ID22];


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:450:4: ^( INCLUDE ID args ) // alt
                {


                INCLUDE25=(CommonTree *)[self match:input TokenType:INCLUDE Follow:FOLLOW_INCLUDE_in_includeExpr784]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID24=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr786]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr788];
                    args23 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                    if ( (args23!=nil?args23.passThru:NO ) )
                        [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU s:(ID24!=nil?ID24.text:nil)];
                    if ( (args23!=nil?args23.namedArgs:NO ) )
                        [self emit1:INCLUDE25 opcode:Bytecode.INSTR_NEW_BOX_ARGS s:(ID24!=nil?ID24.text:nil)];
                    else
                        [self emit2:INCLUDE25 opcode:Bytecode.INSTR_NEW s:(ID24!=nil?ID24.text:nil) arg2:(args23!=nil?args23.n:0)];
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:456:4: ^( INCLUDE_SUPER ID args ) // alt
                {


                INCLUDE_SUPER28=(CommonTree *)[self match:input TokenType:INCLUDE_SUPER Follow:FOLLOW_INCLUDE_SUPER_in_includeExpr799]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID27=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr801]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_includeExpr803];
                    args26 = [self args];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 
                    if ( (args26!=nil?args26.passThru:NO ) )
                        [self emit1:((CommonTree *)retval.start) opcode:Bytecode.INSTR_PASSTHRU s:(ID27!=nil?ID27.text:nil)];
                    if ( (args26!=nil?args26.namedArgs:NO ) )
                        [self emit1:INCLUDE_SUPER28 opcode:Bytecode.INSTR_SUPER_NEW_BOX_ARGS s:(ID27!=nil?ID27.text:nil)];
                    else
                        [self emit2:INCLUDE_SUPER28 opcode:Bytecode.INSTR_SUPER_NEW s:(ID27!=nil?ID27.text:nil) arg2:(args26!=nil?args26.n:0)];
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:462:4: ^( INCLUDE_REGION ID ) // alt
                {


                INCLUDE_REGION30=(CommonTree *)[self match:input TokenType:INCLUDE_REGION Follow:FOLLOW_INCLUDE_REGION_in_includeExpr814]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID29=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr816]; 

                    [self match:input TokenType:UP Follow:nil]; 
                    CompiledST *impl = [Compiler defineBlankRegion:outermostImpl token:(STToken *)ID29.token];
                    //impl.dump();
                    [self emit2:INCLUDE_REGION30 opcode:Bytecode.INSTR_NEW s:impl.name arg2:0];
                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:468:4: ^( INCLUDE_SUPER_REGION ID ) // alt
                {


                INCLUDE_SUPER_REGION32=(CommonTree *)[self match:input TokenType:INCLUDE_SUPER_REGION Follow:FOLLOW_INCLUDE_SUPER_REGION_in_includeExpr826]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    ID31=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_includeExpr828]; 

                    [self match:input TokenType:UP Follow:nil]; 




                                                     NSString *mangled =
                                                        [STGroup getMangledRegionName:outermostImpl.name name:(ID31!=nil?ID31.text:nil)];
                                                    [self emit2:INCLUDE_SUPER_REGION32 opcode:Bytecode.INSTR_SUPER_NEW s:mangled arg2:0];
                                                    


                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:473:4: primary // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_primary_in_includeExpr836];
                [self primary];

                [self popFollow];



                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end includeExpr */

/*
 * $ANTLR start primary
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:476:1: primary : ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) );
 */
- (CodeGenerator_primary_return *) primary
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_primary_return * retval = [CodeGenerator_primary_return newCodeGenerator_primary_return];
    [retval setStart:[input LT:1]];


    @try {
        CommonTree *ID33 = nil;
        CommonTree *STRING34 = nil;
        CommonTree *T_TRUE35 = nil;
        CommonTree *T_FALSE36 = nil;
        CommonTree *INCLUDE_IND38 = nil;
        CommonTree *TO_STR40 = nil;
         CodeGenerator_subtemplate_return * subtemplate37 = nil ;
         
         CodeGenerator_args_return * args39 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:477:2: ( ID | STRING | T_TRUE | T_FALSE | subtemplate | list | ^( INCLUDE_IND expr args ) | ^( TO_STR expr ) ) //ruleblock
        NSInteger alt19=8;
        unichar charLA19 = [input LA:1];
        switch (charLA19) {
            case ID: ;
                {
                alt19=1;
                }
                break;
            case STRING: ;
                {
                alt19=2;
                }
                break;
            case T_TRUE: ;
                {
                alt19=3;
                }
                break;
            case T_FALSE: ;
                {
                alt19=4;
                }
                break;
            case SUBTEMPLATE: ;
                {
                alt19=5;
                }
                break;
            case LIST: ;
                {
                alt19=6;
                }
                break;
            case INCLUDE_IND: ;
                {
                alt19=7;
                }
                break;
            case TO_STR: ;
                {
                alt19=8;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:19 state:0 stream:input];
            nvae.c = charLA19;
            @throw nvae;

        }

        switch (alt19) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:477:4: ID // alt
                {

                ID33=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_primary847]; 


                [self refAttr:ID33];


                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:478:4: STRING // alt
                {

                STRING34=(CommonTree *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_primary857]; 


                [self emit1:STRING34 opcode:Bytecode.INSTR_LOAD_STR s:[Misc strip:(STRING34!=nil?STRING34.text:nil) n:1]];


                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:479:4: T_TRUE // alt
                {

                T_TRUE35=(CommonTree *)[self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_primary867]; 


                [self emit:T_TRUE35 opcode:Bytecode.INSTR_TRUE];


                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:480:4: T_FALSE // alt
                {

                T_FALSE36=(CommonTree *)[self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_primary876]; 


                [self emit:T_FALSE36 opcode:Bytecode.INSTR_FALSE];


                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:481:4: subtemplate // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_subtemplate_in_primary885];
                subtemplate37 = [self subtemplate];

                [self popFollow];




                [self emit2:((CommonTree *)retval.start) opcode:Bytecode.INSTR_NEW s:
                (subtemplate37!=nil?subtemplate37.name:nil )
                 arg2:0];


                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:483:4: list // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_list_in_primary912];
                [self list];

                [self popFollow];



                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:484:4: ^( INCLUDE_IND expr args ) // alt
                {


                INCLUDE_IND38=(CommonTree *)[self match:input TokenType:INCLUDE_IND Follow:FOLLOW_INCLUDE_IND_in_primary919]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary924];
                    [self expr];

                    [self popFollow];




                    [self emit:INCLUDE_IND38 opcode:Bytecode.INSTR_TOSTR];


                    /* ruleRef */
                    [self pushFollow:FOLLOW_args_in_primary938];
                    args39 = [self args];

                    [self popFollow];




                    [self emit1:INCLUDE_IND38 opcode:Bytecode.INSTR_NEW_IND arg:
                    (args39!=nil?args39.n:0)
                    ];


                    [self match:input TokenType:UP Follow:nil]; 


                }
                break;
            case 8 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:488:4: ^( TO_STR expr ) // alt
                {


                TO_STR40=(CommonTree *)[self match:input TokenType:TO_STR Follow:FOLLOW_TO_STR_in_primary958]; 

                    [self match:input TokenType:DOWN Follow:nil]; 

                    /* ruleRef */
                    [self pushFollow:FOLLOW_expr_in_primary960];
                    [self expr];

                    [self popFollow];



                    [self match:input TokenType:UP Follow:nil]; 



                [self emit:TO_STR40 opcode:Bytecode.INSTR_TOSTR];


                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return retval;
}
/* $ANTLR end primary */

/*
 * $ANTLR start arg
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:491:1: arg : expr ;
 */
- (void) arg
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:491:5: ( expr ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:491:7: expr // alt
        {

        /* ruleRef */
        [self pushFollow:FOLLOW_expr_in_arg973];
        [self expr];

        [self popFollow];



        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end arg */

/*
 * $ANTLR start args
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:493:1: args returns [NSInteger n=0, BOOL namedArgs=NO, BOOL passThru] : ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |);
 */
- (CodeGenerator_args_return *) args
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_args_return * retval = [CodeGenerator_args_return newCodeGenerator_args_return];
    [retval setStart:[input LT:1]];


    @try {
        CommonTree *eq = nil;
        CommonTree *ID41 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:494:2: ( ( arg )+ | ( ^(eq= '=' ID expr ) )+ ( '...' )? | '...' |) //ruleblock
        NSInteger alt23=4;
        unichar charLA23 = [input LA:1];
        switch (charLA23) {
            case ID: ;
            case STRING: ;
            case T_FALSE: ;
            case T_TRUE: ;
            case EXEC_FUNC: ;
            case INCLUDE: ;
            case INCLUDE_IND: ;
            case INCLUDE_REGION: ;
            case INCLUDE_SUPER: ;
            case INCLUDE_SUPER_REGION: ;
            case LIST: ;
            case MAP: ;
            case PROP: ;
            case PROP_IND: ;
            case SUBTEMPLATE: ;
            case TO_STR: ;
            case ZIP: ;
                {
                alt23=1;
                }
                break;
            case EQUALS: ;
                {
                alt23=2;
                }
                break;
            case ELLIPSIS: ;
                {
                alt23=3;
                }
                break;
            case UP: ;
                {
                alt23=4;
                }
                break;

        default: ;
            NoViableAltException *nvae = [NoViableAltException newException:23 state:0 stream:input];
            nvae.c = charLA23;
            @throw nvae;

        }

        switch (alt23) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:494:4: ( arg )+ // alt
                {

                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:494:4: ( arg )+ // positiveClosureBlock
                NSInteger cnt20 = 0;
                do {
                    NSInteger alt20 = 2;
                    NSInteger LA20_0 = [input LA:1];
                    if ( (LA20_0==ID||LA20_0==STRING||(LA20_0 >= T_FALSE && LA20_0 <= T_TRUE)||LA20_0==EXEC_FUNC||(LA20_0 >= INCLUDE && LA20_0 <= INCLUDE_SUPER_REGION)||(LA20_0 >= LIST && LA20_0 <= MAP)||(LA20_0 >= PROP && LA20_0 <= PROP_IND)||LA20_0==SUBTEMPLATE||(LA20_0 >= TO_STR && LA20_0 <= ZIP)) ) {
                        alt20=1;
                    }


                    switch (alt20) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:494:6: arg // alt
                            {

                            /* ruleRef */
                            [self pushFollow:FOLLOW_arg_in_args989];
                            [self arg];
                            [self popFollow];
                            /* added to returnAttributeRef */
                            retval.n++;
                            }
                            break;
                        default :
                            if ( cnt20 >= 1 )
                                goto loop20;
                            EarlyExitException *eee =
                                [EarlyExitException newException:input decisionNumber:20];
                            @throw eee;
                    }
                    cnt20++;
                } while (YES);
                loop20: ;
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:495:4: ( ^(eq= '=' ID expr ) )+ ( '...' )? // alt
                {


                [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS]; 
                 retval.namedArgs =YES; /* added to returnSetAttributeRef */



                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:496:3: ( ^(eq= '=' ID expr ) )+ // positiveClosureBlock
                NSInteger cnt21 = 0;
                do {
                    NSInteger alt21 = 2;
                    NSInteger LA21_0 = [input LA:1];
                    if ( (LA21_0==EQUALS) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 : ;
                            // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:496:5: ^(eq= '=' ID expr ) // alt
                            {
                                eq=(CommonTree *)[self match:input TokenType:EQUALS Follow:FOLLOW_EQUALS_in_args1008]; 
                                [self match:input TokenType:DOWN Follow:nil]; 
                                ID41=(CommonTree *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_args1010]; 
                                /* ruleRef */
                                [self pushFollow:FOLLOW_expr_in_args1012];
                                [self expr];
                                [self popFollow];
                                [self match:input TokenType:UP Follow:nil]; 
                                retval.n++;  /* added to returnAttributeRef */
                                [self emit1:eq opcode:Bytecode.INSTR_STORE_ARG arg:[self defineString:(ID41!=nil?ID41.text:nil)]];
                            }
                            break;

                        default :
                            if ( cnt21 >= 1 )
                                goto loop21;
                            EarlyExitException *eee =
                                [EarlyExitException newException:input decisionNumber:21];
                            @throw eee;
                    }
                    cnt21++;
                } while (YES);
                loop21: ;


                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:3: ( '...' )? // block
                NSInteger alt22=2;
                NSInteger LA22_0 = [input LA:1];

                if ( (LA22_0==ELLIPSIS) ) {
                    alt22=1;
                }
                switch (alt22) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:499:5: '...' // alt
                        {
                        [self match:input TokenType:ELLIPSIS Follow:FOLLOW_ELLIPSIS_in_args1029];
                        retval.passThru =YES; /* added to returnSetAttributeRef */
                        }
                        break;
                }
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:500:9: '...' // alt
                {
                [self match:input TokenType:ELLIPSIS Follow:FOLLOW_ELLIPSIS_in_args1044]; 
                retval.passThru =YES; /* added to returnSetAttributeRef */
                [self emit:((CommonTree *)retval.start) opcode:Bytecode.INSTR_ARGS]; 
                retval.namedArgs =YES; /* added to returnSetAttributeRef */
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:502:3:  // alt
                {
                }
                break;
        }
        /* token+rule list labels */
    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
        /* ruleScopeCleanUp */
    }
    return retval;
}
/* $ANTLR end args */

/*
 * $ANTLR start list
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:504:1: list : ^( LIST ( listElement )* ) ;
 */
- (void) list
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
         CodeGenerator_listElement_return * listElement42 = nil ;
         

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:504:5: ( ^( LIST ( listElement )* ) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:504:7: ^( LIST ( listElement )* ) // alt
        {


        [self emit:Bytecode.INSTR_LIST];



        [self match:input TokenType:LIST Follow:FOLLOW_LIST_in_list1064]; 

        if ( [input LA:1] == DOWN ) {
            [self match:input TokenType:DOWN Follow:nil]; 


            do {
                NSInteger alt24=2;
                NSInteger LA24_0 = [input LA:1];
                if ( (LA24_0==ID||LA24_0==STRING||(LA24_0 >= T_FALSE && LA24_0 <= T_TRUE)||LA24_0==EXEC_FUNC||(LA24_0 >= INCLUDE && LA24_0 <= INCLUDE_SUPER_REGION)||(LA24_0 >= LIST && LA24_0 <= MAP)||(LA24_0 >= PROP && LA24_0 <= PROP_IND)||(LA24_0 >= SUBTEMPLATE && LA24_0 <= ZIP)) ) {
                    alt24=1;
                }


                switch (alt24) {
                    case 1 : ;
                        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:505:11: listElement // alt
                        {
                        /* ruleRef */
                        [self pushFollow:FOLLOW_listElement_in_list1067];
                        listElement42 = [self listElement];
                        [self popFollow];
                        [self emit:(listElement42!=nil?((CommonTree *)listElement42.start):nil) opcode:Bytecode.INSTR_ADD];
                        }
                        break;
                    default :
                        goto loop24;
                }
            } while (YES);
            loop24: ;
            [self match:input TokenType:UP Follow:nil]; 
        }
        }
        /* token+rule list labels */
    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
        /* ruleScopeCleanUp */
    }
    return ;
}
/* $ANTLR end list */

/*
 * $ANTLR start listElement
 * /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:508:1: listElement : ( expr | TNULL );
 */
- (CodeGenerator_listElement_return *) listElement
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    CodeGenerator_listElement_return * retval = [CodeGenerator_listElement_return newCodeGenerator_listElement_return];
    [retval setStart:[input LT:1]];


    @try {
        CommonTree *TNULL43 = nil;

        // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:508:13: ( expr | TNULL ) //ruleblock
        NSInteger alt25=2;
        NSInteger LA25_0 = [input LA:1];

        if ( (LA25_0==ID||LA25_0==STRING||(LA25_0 >= T_FALSE && LA25_0 <= T_TRUE)||LA25_0==EXEC_FUNC||(LA25_0 >= INCLUDE && LA25_0 <= INCLUDE_SUPER_REGION)||(LA25_0 >= LIST && LA25_0 <= MAP)||(LA25_0 >= PROP && LA25_0 <= PROP_IND)||LA25_0==SUBTEMPLATE||(LA25_0 >= TO_STR && LA25_0 <= ZIP)) ) {
            alt25=1;
        }
        else if ( (LA25_0==TNULL) ) {
            alt25=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:25 state:0 stream:input];
            nvae.c = LA25_0;
            @throw nvae;

        }
        switch (alt25) {
            case 1 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:508:15: expr // alt
                {
                /* ruleRef */
                [self pushFollow:FOLLOW_expr_in_listElement1083];
                [self expr];
                [self popFollow];
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr3/acondit_localhost/code/ST4/objc/main/compiler/CodeGenerator.g:508:22: TNULL // alt
                {
                TNULL43=(CommonTree *)[self match:input TokenType:TNULL Follow:FOLLOW_TNULL_in_listElement1087]; 
                [self emit:TNULL43 opcode:Bytecode.INSTR_NULL];
                }
                break;
        }
        /* token+rule list labels */
    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }
    @finally {
        /* ruleScopeCleanUp */
    }
    return retval;
}
/* $ANTLR end listElement */
/* ObjC end rules */

@end /* end of CodeGenerator implementation line 692 */
